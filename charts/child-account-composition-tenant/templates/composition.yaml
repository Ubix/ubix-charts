apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: childaccount-tenant
  labels:
      provider: upbound-provider-family-aws
      name: childaccount-tenant
spec:
  compositeTypeRef:
    apiVersion: tenant.resources/v1alpha1
    kind: ChildAccount
  writeConnectionSecretsToNamespace: crossplane-system
  patchSets:
  - name: metadata
    patches:
    - fromFieldPath: metadata.labels
      type: FromCompositeFieldPath
  resources:
  - name: child-account
    base:
      apiVersion: organizations.aws.upbound.io/v1beta1
      kind: Account
      spec:
        forProvider:
          closeOnDeletion: true
          email: awsaccountadmin+crossplane.customername@ubixlabs.com
          name: crossplanecreated
          parentId: {{ .Values.parentId }}
          region: #patchme
        providerConfigRef:
          name: root
        deletionPolicy: Delete
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-tenant'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.email
      toFieldPath: spec.forProvider.email
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.name
      toFieldPath: spec.forProvider.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.parentId
      toFieldPath: spec.forProvider.parentId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.id
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.status
      toFieldPath: status.accountStatus
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.arn
    readinessChecks:
    - type: MatchString
      fieldPath: status.atProvider.status
      matchString: ACTIVE
    connectionDetails:
      - fromConnectionSecretKey: kubeconfig

#this resource is key to deploy everything inside the newly created account
  - name: provider-config
    base:
      apiVersion: aws.upbound.io/v1beta1
      kind: ProviderConfig
      metadata:
        #name: crossplane-test-pconfig
        labels:
          provider: upbound-provider-family-aws
          name: childaccount
      spec:
        #assumeRoleARN: "arn:aws:iam::798374069605:role/OrganizationAccountAccessRole"
        credentials:
          source: IRSA
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.labels
      toFieldPath: metadata.labels
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.assumeRoleChain[0].roleARN
      transforms:
        - type: string
          string:
            fmt: "arn:aws:iam::%s:role/OrganizationAccountAccessRole"
    readinessChecks:
    - type: None

#### Tenant Storage

  - name: experimental-data-bucket
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: Bucket
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
    patches:
    - type: CombineFromComposite
      toFieldPath: metadata.name
      policy:
        fromFieldPath: Required
      combine:
        variables:
          - fromFieldPath: spec.id
          - fromFieldPath: status.id
        strategy: string
        string:
          fmt: "%s-%s-ingestion"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.experimentalDataBucket

  - name: experimental-data-bucket-policy
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketPolicy
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
    patches:
    - type: CombineFromComposite
      toFieldPath: metadata.name
      policy:
        fromFieldPath: Required
      combine:
        variables:
          - fromFieldPath: spec.id
          - fromFieldPath: status.id
        strategy: string
        string:
          fmt: "%s-%s-ingestion-bp"
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      policy:
        fromFieldPath: Required
      combine:
        variables:
          - fromFieldPath: spec.id
          - fromFieldPath: status.id
          - fromFieldPath: spec.id
          - fromFieldPath: status.id
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": [
                      "arn:aws:iam::{{ .Values.parentAccountId }}:role/data-service-role",
                      "arn:aws:iam::{{ .Values.parentAccountId }}:role/dataflow-role",
                      "arn:aws:iam::{{ .Values.parentAccountId }}:role/dataspace-backend-role",
                      "arn:aws:iam::{{ .Values.parentAccountId }}:role/external-data-upload-role",
                      "arn:aws:iam::{{ .Values.parentAccountId }}:role/airbyte-admin"
                    ]
                  },
                  "Action": ["s3:*"],
                  "Resource": ["arn:aws:s3:::%s-%s-ingestion", "arn:aws:s3:::%s-%s-ingestion/*"],
                  "Condition": {
                    "StringEquals": {
                      "aws:PrincipalOrgID": "o-xen85rya21"
                    }
                  }
                }
              ]
            }
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.bucketRef.name
      policy:
        fromFieldPath: Required
      combine:
        variables:
          - fromFieldPath: spec.id
          - fromFieldPath: status.id
        strategy: string
        string:
          fmt: "%s-%s-ingestion"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ingestion-cors-config
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketCorsConfiguration
      spec:
        deletionPolicy: Orphan
        forProvider:
          bucketRef:
            name: #patchme
          corsRule:
            - allowedHeaders:
                - "*"
              allowedMethods:
                - PUT
              allowedOrigins:
                - https://dataspace.{{ .Values.parentAccount }}.ubix.io
          region: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-ingestion-bucket-cors'
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.bucketRef.name
      policy:
        fromFieldPath: Required
      combine:
        variables:
          - fromFieldPath: spec.id
          - fromFieldPath: status.id
        strategy: string
        string:
          fmt: "%s-%s-ingestion"
    # - type: FromCompositeFieldPath
    #   fromFieldPath: spec.id
    #   toFieldPath: spec.forProvider.corsRule[0].allowedOrigins[0]
    #   transforms:
    #     - type: string
    #       string:
    #         fmt: 'https://dataspace.%s.ubix.io'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: warehouse-bucket
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: Bucket
      metadata:
        annotations:
          crossplane.io/external-name: #patchme
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
    patches:
    - type: CombineFromComposite
      toFieldPath: metadata.name
      policy:
        fromFieldPath: Required
      combine:
        variables:
          - fromFieldPath: spec.id
          - fromFieldPath: status.id
        strategy: string
        string:
          fmt: "%s-%s-warehouse"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.warehouseBucket

  - name: warehouse-bucket-policy
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketPolicy
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
    patches:
    - type: CombineFromComposite
      toFieldPath: metadata.name
      policy:
        fromFieldPath: Required
      combine:
        variables:
          - fromFieldPath: spec.id
          - fromFieldPath: status.id
        strategy: string
        string:
          fmt: "%s-%s-warehouse-bp"
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      policy:
        fromFieldPath: Required
      combine:
        variables:
          - fromFieldPath: spec.id
          - fromFieldPath: status.id
          - fromFieldPath: spec.id
          - fromFieldPath: status.id
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": [
                      "arn:aws:iam::{{ .Values.parentAccountId }}:role/spark",
                      "arn:aws:iam::{{ .Values.parentAccountId }}:role/trino",
                      "arn:aws:iam::{{ .Values.parentAccountId }}:role/metastore",
                      "arn:aws:iam::{{ .Values.parentAccountId }}:role/data-service-role",
                      "arn:aws:iam::{{ .Values.parentAccountId }}:role/dataflow-role",
                      "arn:aws:iam::{{ .Values.parentAccountId }}:role/airbyte-admin",
                      "arn:aws:iam::{{ .Values.parentAccountId }}:role/exec-service-python-role"
                    ]
                  },
                  "Action": ["s3:*"],
                  "Resource": ["arn:aws:s3:::%s-%s-warehouse", "arn:aws:s3:::%s-%s-warehouse/*"],
                  "Condition": {
                    "StringEquals": {
                      "aws:PrincipalOrgID": "o-xen85rya21"
                    }
                  }
                }
              ]
            }
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.bucketRef.name
      policy:
        fromFieldPath: Required
      combine:
        variables:
          - fromFieldPath: spec.id
          - fromFieldPath: status.id
        strategy: string
        string:
          fmt: "%s-%s-warehouse"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

#### Bedrock Access

  - name: bedrock-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": [
                      "arn:aws:iam::{{ .Values.parentAccountId }}:role/chatubix-api-role"
                    ]
                  },
                  "Action": "sts:AssumeRole",
                  "Condition": {
                    "StringEquals": {
                      "aws:PrincipalOrgID": "o-xen85rya21"
                    }
                  }
                }
              ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-bedrock'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.bedrockRole

  - name: bedrock-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "BedrockAll",
                        "Effect": "Allow",
                        "Action": [
                            "bedrock:*"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Sid": "DescribeKey",
                        "Effect": "Allow",
                        "Action": [
                            "kms:DescribeKey"
                        ],
                        "Resource": "arn:*:kms:*:::*"
                    },
                    {
                        "Sid": "APIsWithAllResourceAccess",
                        "Effect": "Allow",
                        "Action": [
                            "iam:ListRoles",
                            "ec2:DescribeVpcs",
                            "ec2:DescribeSubnets",
                            "ec2:DescribeSecurityGroups"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Sid": "PassRoleToBedrock",
                        "Effect": "Allow",
                        "Action": [
                            "iam:PassRole"
                        ],
                        "Resource": "arn:aws:iam::*:role/*AmazonBedrock*",
                        "Condition": {
                            "StringEquals": {
                                "iam:PassedToService": [
                                    "bedrock.amazonaws.com"
                                ]
                            }
                        }
                    }
                ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
        - type: string
          string:
            fmt: '%s-bedrock'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-bedrock-policy'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: bedrock-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
        - type: string
          string:
            fmt: '%s-bedrock'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
        - type: string
          string:
            fmt: '%s-bedrock-policy'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-bedrock-policy-attachment'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: setup-job-customer-dripper-workspace
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        providerConfigRef:
          name: "{{ .Values.parentAccountId }}-cluster-credentials"
        forProvider:
          manifest:
            apiVersion: batch/v1
            kind: Job
            metadata:
              namespace: data-tooling
            spec:
              completions: 1
              backoffLimit: 5
              ttlSecondsAfterFinished: 100
              template:
                spec:
                  restartPolicy: Never
                  backoffLimit: 4
                  containers:
                  - name: create-dripper-wks
                    image: nginx
                    command: ["curl", "-H", "Content-Type: application/json", "-X", "POST", "-d", "'{}'", "http://dripper-manager-api.data-tooling:8080/ingestions/workspaces"]
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-dripper-workspace-creation'
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].command[6]
      policy:
        fromFieldPath: Required
      combine:
        variables:
        - fromFieldPath: spec.parameters.customerId
        - fromFieldPath: status.warehouseBucket
        strategy: string
        string:
          fmt: '{"tenant": "%s", "bucket": "%s"}'
