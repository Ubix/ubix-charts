apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: {{ include "account-provisioner.fullname" . }}
  namespace: {{ .Release.Namespace }}
spec:
  eventBusName: {{ include "account-provisioner.fullname" . }}
  template:
    serviceAccountName: {{ include "account-provisioner.fullname" . }}
  dependencies:
    - name: {{ template "account-provisioner.fullname" $ }}-dependency
      eventSourceName: {{ include "account-provisioner.fullname" . }}
      eventName: create-account
  triggers:
    - template:
        name: {{ template "account-provisioner.fullname" $ }}-trigger
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: {{ include "account-provisioner.fullname" $ }}-status-
              spec:
                serviceAccountName:  {{ include "account-provisioner.fullname" . }}
                entrypoint: {{ include "account-provisioner.fullname" $ }}-status
                # Delete workflow pods after pod completion (including error/failures)
                podGc:
                  strategy: OnPodCompletion
                  deleteDelayDuration: 30s
                arguments:
                  parameters:
                    - name: message
                      value: hello world
                templates:
                  - name: {{ include "account-provisioner.fullname" $ }}-status
                    retryStrategy:
                      limit: "5"
                      retryPolicy: "Always"
                    inputs:
                      parameters:
                        - name: message
                    container:
                      image: {{ .Values.sensor.image.repository }}:{{ .Values.sensor.image.tag }}
                      {{- with .Values.sensor.args}}
                      args:
                        {{- range . }}
                        - {{ . }}
                        {{- end }}
                      {{- end }}
                      env:
                        - name: PROVISION_MESSAGE
                          value: '{{`{{inputs.parameters.message}}`}}'
                        - name: BROKER_USER
                          valueFrom:
                            secretKeyRef:
                              name: {{ .Values.sensor.brokerSecretName }}
                              key: {{ .Values.sensor.brokerSecretUserKey }}
                        - name: BROKER_PASSWORD
                          valueFrom:
                            secretKeyRef:
                              name: {{ .Values.sensor.brokerSecretName }}
                              key: {{ .Values.sensor.brokerSecretPasswordKey }}
                      envFrom:
                        - secretRef:
                            name: {{ template "account-provisioner.fullname" $ }}-envs
                        - configMapRef:
                            name: {{ template "account-provisioner.fullname" $ }}-envs
                      volumeMounts:
                        - name: pem-file
                          mountPath: /usr/src/app/account-provisioner.pem
                          subPath: account-provisioner.pem
                    volumes:
                      - name: pem-file
                        secret:
                          items:
                            - key: account-provisioner.pem
                              path: account-provisioner.pem
                          secretName: {{ template "account-provisioner.fullname" $ }}-pem
          parameters:
            - src:
                dependencyName: {{ template "account-provisioner.fullname" $ }}-dependency
                dataKey: body
              dest: spec.arguments.parameters.0.value
