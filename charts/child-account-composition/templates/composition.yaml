apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: childaccount
  labels:
      provider: upbound-provider-family-aws
      name: childaccount
spec:
  compositeTypeRef:
    apiVersion: cloudspace.resources/v1alpha1
    kind: ChildAccount
  writeConnectionSecretsToNamespace: crossplane-system
  patchSets:
  - name: metadata
    patches:
    - fromFieldPath: metadata.labels
      type: FromCompositeFieldPath
  resources:
  - name: child-account
    base:
      apiVersion: organizations.aws.upbound.io/v1beta1
      kind: Account
      spec:
        forProvider:
          closeOnDeletion: true
          email: awsaccountadmin+crossplane.customername@ubixlabs.com
          name: crossplanecreated
          parentId: {{ .Values.parentId }}
          region: #patchme
        providerConfigRef:
          name: root
        deletionPolicy: Delete
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.email
      toFieldPath: spec.forProvider.email
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.name
      toFieldPath: spec.forProvider.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.parentId
      toFieldPath: spec.forProvider.parentId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.id
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.status
      toFieldPath: status.accountStatus
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.arn
    readinessChecks:
    - type: MatchString
      fieldPath: status.atProvider.status
      matchString: ACTIVE
    connectionDetails:
      - fromConnectionSecretKey: kubeconfig

#this resource is key to deploy everything inside the newly created account
  - name: provider-config
    base:
      apiVersion: aws.upbound.io/v1beta1
      kind: ProviderConfig
      metadata:
        #name: crossplane-test-pconfig
        labels:
          provider: upbound-provider-family-aws
          name: childaccount
      spec:
        #assumeRoleARN: "arn:aws:iam::798374069605:role/OrganizationAccountAccessRole"
        credentials:
          source: IRSA
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: metadata.labels
      toFieldPath: metadata.labels
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.assumeRoleChain[0].roleARN
      transforms:
        - type: string
          string:
            fmt: "arn:aws:iam::%s:role/OrganizationAccountAccessRole"
    readinessChecks:
    - type: None

  - name: vpc
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: VPC
      spec:
        deletionPolicy: Orphan
        forProvider:
          enableDnsHostnames: true
          cidrBlock: 10.0.0.0/16
          enableDnsSupport: true
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.vpcID

##
# EKS Security Groups
##

  - name: node-security-group
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroup
      spec:
        deletionPolicy: Orphan
        forProvider:
          tags:
            karpenter.sh/discovery: #patchme
            worker-security-group: default
          description: Security group for all nodes in the cluster
          name: #patchme
          region: #patchme
          vpcIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.tags[karpenter.sh/discovery]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-node-sg'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.name
      transforms:
      - string:
          fmt: '%s-node-sg'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.nodeSecurityGroupID
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: node-security-group-rule-egress
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          cidrBlocks:
          - 0.0.0.0/0
          description: Allow egress from the nodes
          ipv6CidrBlocks:
          - ::/0
          fromPort: 0
          protocol: "-1"
          toPort: 0
          type: egress
          region: #patchme
          securityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-node-egress'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: node-security-group-ingress-self
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: Allow node to communicate with each other
          fromPort: 0
          protocol: "-1"
          toPort: 65535
          type: ingress
          region: #patchme
          securityGroupIdRef:
            name: #patchme
          sourceSecurityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-node-to-node'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.sourceSecurityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: node-security-group-ingress-cluster
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: Allow worker Kubelets and pods to receive communication from
            the cluster control plane
          fromPort: 1025
          protocol: tcp
          toPort: 65535
          type: ingress
          region: #patchme
          securityGroupIdRef:
            name: #patchme
          sourceSecurityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-kubelets'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.sourceSecurityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ekscluster-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: cluster-security-group
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroup
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: Cluster communication with worker nodes
          name: #patchme
          region: #patchme
          vpcIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-ekscluster-sg'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.name
      transforms:
      - string:
          fmt: '%s-ekscluster-sg'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.clusterSecurityGroupID
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: cluster-security-group-rule-ingress
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: Allow pods to communicate with the cluster API Server -
          fromPort: 443
          protocol: tcp
          toPort: 443
          type: ingress
          region: #patchme
          securityGroupIdRef:
            name: #patchme
          sourceSecurityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-pods-to-api-server'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ekscluster-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.sourceSecurityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: cluster-security-group-rule-egress-api-server-to-pods
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: Cluster API to node groups
          fromPort: 443
          protocol: tcp
          toPort: 443
          type: egress
          region: #patchme
          securityGroupIdRef:
            name: #patchme
          sourceSecurityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-api-server-to-pods'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ekscluster-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.sourceSecurityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: cluster-security-group-rule-egress-ephemeral-ports
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: Allow pods to communicate with using ephemeral ports.
          fromPort: 1025
          protocol: tcp
          toPort: 65535
          type: egress
          region: #patchme
          securityGroupIdRef:
            name: #patchme
          sourceSecurityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-pods-ephemeral-ports'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ekscluster-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.sourceSecurityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: cluster-primary-security-group-rule-dns-tcp
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: Allow pods to communicate with CoreDNS
          fromPort: 53
          protocol: tcp
          toPort: 53
          type: ingress
          region: #patchme
          securityGroupId: #patchme
          sourceSecurityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-pods-to-core-dns-tcp'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.clusterPrimarySecurityGroupId
      toFieldPath: spec.forProvider.securityGroupId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.sourceSecurityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: cluster-primary-security-group-rule-dns-udp
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: Allow pods to communicate with CoreDNS
          fromPort: 53
          protocol: udp
          toPort: 53
          type: ingress
          region: #patchme
          securityGroupId: #patchme
          sourceSecurityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-pods-to-core-dns-udp'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.clusterPrimarySecurityGroupId
      toFieldPath: spec.forProvider.securityGroupId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.sourceSecurityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: cluster-primary-security-group-allow-all-traffic-from-nodes
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: Allow nodes to communicate to fargate pods
          fromPort: 0
          protocol: "-1"
          toPort: 0
          type: ingress
          region: #patchme
          securityGroupId: #patchme
          sourceSecurityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-nodes-to-fargate-all-traffic'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.clusterPrimarySecurityGroupId
      toFieldPath: spec.forProvider.securityGroupId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.sourceSecurityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: node-security-group-ingress-cluster-4443
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: "Allow access from control plane to webhook for metrics server."
          fromPort: 4443
          protocol: tcp
          toPort: 4443
          type: ingress
          region: #patchme
          securityGroupIdRef:
            name: #patchme
          sourceSecurityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-4443'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.sourceSecurityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ekscluster-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: node-security-group-ingress-cluster-6443
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: "Allow access from control plane for Prometheus Server."
          fromPort: 6443
          protocol: tcp
          toPort: 6443
          type: ingress
          region: #patchme
          securityGroupIdRef:
            name: #patchme
          sourceSecurityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-6443'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.sourceSecurityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ekscluster-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: node-security-group-ingress-cluster-8443
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: "Allow access from control plane for Karpenter."
          fromPort: 8443
          protocol: tcp
          toPort: 8443
          type: ingress
          region: #patchme
          securityGroupIdRef:
            name: #patchme
          sourceSecurityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-8443'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.sourceSecurityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ekscluster-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: node-security-group-ingress-cluster-9443
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: "Allow access from control plane to webhook port of AWS load balancer/NGINX controller."
          fromPort: 9443
          protocol: tcp
          toPort: 9443
          type: ingress
          region: #patchme
          securityGroupIdRef:
            name: #patchme
          sourceSecurityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-9443'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.sourceSecurityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ekscluster-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: node-security-group-ingress-cluster-10260
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: "Allow access from control plane to webhook port 10260(cert-manage-webhook)."
          fromPort: 10260
          protocol: tcp
          toPort: 10260
          type: ingress
          region: #patchme
          securityGroupIdRef:
            name: #patchme
          sourceSecurityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-10260'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.sourceSecurityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ekscluster-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: node-security-group-ingress-cluster-10250
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          description: "Allow access from control plane to webhook port 10250."
          fromPort: 10250
          protocol: tcp
          toPort: 10250
          type: ingress
          region: #patchme
          securityGroupIdRef:
            name: #patchme
          sourceSecurityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-10250'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-node-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.sourceSecurityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ekscluster-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name


##
# End EKS Security Group
##

  - name: public-subnet-1-1a
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patched
          availabilityZone: #patched
          cidrBlock: 10.0.16.0/20
          vpcIdRef:
            name: #patched
          mapPublicIpOnLaunch: true
          tags:
            kubernetes.io/role/elb: "1"
            subnet-type: public
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1a'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.availabilityZone
      transforms:
      - type: string
        string:
          fmt: '%sa'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.publicSubnet1aID

  - name: public-subnet-1-1b
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patched
          availabilityZone: #patched
          cidrBlock: 10.0.32.0/20
          vpcIdRef:
            name: #patched
          mapPublicIpOnLaunch: true
          tags:
            kubernetes.io/role/elb: "1"
            subnet-type: public
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1b'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.availabilityZone
      transforms:
      - type: string
        string:
          fmt: '%sb'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.publicSubnet1bID

  - name: public-subnet-1-1c
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patched
          availabilityZone: #patched
          cidrBlock: 10.0.48.0/20
          vpcIdRef:
            name: #patched
          mapPublicIpOnLaunch: true
          tags:
            kubernetes.io/role/elb: "1"
            subnet-type: public
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1c'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.availabilityZone
      transforms:
      - type: string
        string:
          fmt: '%sc'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.publicSubnet1cID

  - name: private-subnet-1-1a
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patched
          availabilityZone: #pached
          cidrBlock: 10.0.64.0/20
          vpcIdRef:
            name: #patched
          tags:
            karpenter.sh/discovery: #patchme
            subnet-type: private
            kubernetes.io/role/internal-elb: "1"
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1a'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.availabilityZone
      transforms:
      - type: string
        string:
          fmt: '%sa'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.tags[karpenter.sh/discovery]
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.privateSubnet1aID

  - name: private-subnet-1-1b
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patched
          availabilityZone: #patched
          cidrBlock: 10.0.80.0/20
          vpcIdRef:
            name: #patched
          tags:
            karpenter.sh/discovery: #patchme
            kubernetes.io/role/internal-elb: "1"
            subnet-type: private
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1b'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.availabilityZone
      transforms:
      - type: string
        string:
          fmt: '%sb'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.tags[karpenter.sh/discovery]
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.privateSubnet1bID

  - name: private-subnet-1-1c
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Subnet
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patched
          availabilityZone: #patched
          cidrBlock: 10.0.112.0/20
          vpcIdRef:
            name: #patched
          tags:
            karpenter.sh/discovery: #patchme
            kubernetes.io/role/internal-elb: "1"
            subnet-type: private
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1c'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.availabilityZone
      transforms:
      - type: string
        string:
          fmt: '%sc'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.tags[karpenter.sh/discovery]
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.privateSubnet1cID

  - name: nat-gateway-eip-1
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: EIP
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
          vpc: true
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nat-gateway-1'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.natGatewayEIPID1

  - name: nat-gateway-eip-2
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: EIP
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
          vpc: true
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nat-gateway-2'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.natGatewayEIPID2

  - name: nat-gateway-eip-3
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: EIP
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
          vpc: true
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nat-gateway-3'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.natGatewayEIPID3

  - name: nat-gateway-1
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: NATGateway
      spec:
        deletionPolicy: Orphan
        forProvider:
          allocationIdRef:
            name: #patchme
          region: #patchme
          subnetIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nat-gateway-1'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.allocationIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-nat-gateway-1'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.subnetIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1c'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.natGatewayID1
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.publicIp
      toFieldPath: status.natGatewayIP1

  - name: nat-gateway-2
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: NATGateway
      spec:
        deletionPolicy: Orphan
        forProvider:
          allocationIdRef:
            name: #patchme
          region: #patchme
          subnetIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nat-gateway-2'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.allocationIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-nat-gateway-2'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.subnetIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1b'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.natGatewayID2
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.publicIp
      toFieldPath: status.natGatewayIP2

  - name: nat-gateway-3
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: NATGateway
      spec:
        deletionPolicy: Orphan
        forProvider:
          allocationIdRef:
            name: #patchme
          region: #patchme
          subnetIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nat-gateway-3'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.allocationIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-nat-gateway-3'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.subnetIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1a'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.natGatewayID3
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.publicIp
      toFieldPath: status.natGatewayIP3

  - name: internet-gateway
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: InternetGateway
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
          vpcIdRef:
            name: #patchme
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.internetGatewayID

  - name: routetable-public
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTable
      spec:
        deletionPolicy: Orphan
        forProvider:
          vpcIdRef:
            name: #patchme
          region: #patchme
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-public'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.publicRouteTableID

  - name: routetable-private-1
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTable
      spec:
        deletionPolicy: Orphan
        forProvider:
          vpcIdRef:
            name: #patchme
          region: #patchme
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.privateRouteTableID1

  - name: routetable-private-2
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTable
      spec:
        deletionPolicy: Orphan
        forProvider:
          vpcIdRef:
            name: #patchme
          region: #patchme
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-2'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.privateRouteTableID2

  - name: routetable-private-3
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTable
      spec:
        deletionPolicy: Orphan
        forProvider:
          vpcIdRef:
            name: #patchme
          region: #patchme
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-3'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.privateRouteTableID3

  - name: public-route
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Route
      spec:
        deletionPolicy: Orphan
        forProvider:
          routeTableIdRef:
            name: #patchme
          gatewayIdRef:
            name: #patchme
          destinationCidrBlock: 0.0.0.0/0
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-public'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.routeTableIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-public'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.gatewayIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: private-route-1
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Route
      spec:
        deletionPolicy: Orphan
        forProvider:
          routeTableIdRef:
            name: #patchme
          natGatewayIdRef:
            name: #patchme
          region: #patchme
          destinationCidrBlock: 0.0.0.0/0
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.routeTableIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.natGatewayIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-nat-gateway-1'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: private-route-2
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Route
      spec:
        deletionPolicy: Orphan
        forProvider:
          routeTableIdRef:
            name: #patchme
          natGatewayIdRef:
            name: #patchme
          region: #patchme
          destinationCidrBlock: 0.0.0.0/0
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-2'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.routeTableIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-2'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.natGatewayIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-nat-gateway-2'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: private-route-3
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: Route
      spec:
        deletionPolicy: Orphan
        forProvider:
          routeTableIdRef:
            name: #patchme
          natGatewayIdRef:
            name: #patchme
          region: #patchme
          destinationCidrBlock: 0.0.0.0/0
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-3'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.routeTableIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-3'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.natGatewayIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-nat-gateway-3'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: private-route-table-assossiation-1-1a
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTableAssociation
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
          routeTableIdRef:
            name: #patchme
          subnetIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1-1a'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.routeTableIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-3'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.subnetIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1a'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: private-route-table-assossiation-1-1b
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTableAssociation
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
          routeTableIdRef:
            name: #patchme
          subnetIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1-1b'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.routeTableIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-2'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.subnetIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1b'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: private-route-table-assossiation-1-1c
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTableAssociation
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
          routeTableId: #patchme
          subnetId: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1-1c'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.routeTableIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.subnetIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1c'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: public-route-table-assossiation-1-1a
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTableAssociation
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
          routeTableIdRef:
            name: #patchme
          subnetIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1-1a'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.routeTableIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-public'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.subnetIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1a'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: public-route-table-assossiation-1-1b
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTableAssociation
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
          routeTableIdRef:
            name: #patchme
          subnetIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1-1b'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.routeTableIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-public'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.subnetIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1b'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: public-route-table-assossiation-1-1c
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: RouteTableAssociation
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
          routeTableIdRef:
            name: #patchme
          subnetIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1-1c'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.routeTableIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-public'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.subnetIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1c'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

# ########
# # EKS Cluster and related resources
# ########
  - name: ekscluster
    base:
      apiVersion: eks.aws.upbound.io/v1beta1
      kind: Cluster
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
          version: #patchme
          vpcConfig:
            - endpointPrivateAccess: true
              endpointPublicAccess: true
              subnetIdRefs:
                - name: #patchme
                - name: #patchme
                - name: #patchme
              securityGroupIdRefs:
                - name: #patchme
          roleArnSelector:
            matchControllerRef: true
          encryptionConfig:
            - provider:
                - keyArn: patchme
              resources:
                - secrets
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.eks.version
      toFieldPath: spec.forProvider.version
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcConfig[0].subnetIdRefs[0].name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1a'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcConfig[0].subnetIdRefs[1].name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1b'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcConfig[0].subnetIdRefs[2].name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1c'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcConfig[0].securityGroupIdRefs[0].name
      transforms:
      - type: string
        string:
          fmt: '%s-ekscluster-sg'
    - type: FromCompositeFieldPath
      fromFieldPath: status.eksKmsArn
      toFieldPath: spec.forProvider.encryptionConfig[0].provider[0].keyArn
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleArnSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: '%s-controlplane'
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.clusterName
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.status
      toFieldPath: status.controlPlaneStatus
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.identity[0].oidc[0].issuer
      toFieldPath: status.clusterOIDCid
      transforms:
      - type: string
        string:
          type: Regexp
          regexp:
            match: '.*\/id\/(.*)'
            group: 1
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.identity[0].oidc[0].issuer
      toFieldPath: status.clusterOIDC
      transforms:
      - type: string
        string:
          type: TrimPrefix
          trim: 'https://'
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.endpoint
      toFieldPath: status.clusterEndpoint
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.certificateAuthority[0].data
      toFieldPath: status.clusterCertificateAuthorityData
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.vpcConfig[0].clusterSecurityGroupId
      toFieldPath: status.clusterPrimarySecurityGroupId
    readinessChecks:
    - type: MatchString
      fieldPath: status.atProvider.status
      matchString: ACTIVE

  - name: identity-provider
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: OpenIDConnectProvider
      spec:
        deletionPolicy: Orphan
        forProvider:
          url: ""
          clientIdList:
            - sts.amazonaws.com
          thumbprintList:
            - 9e99a48a9960b14926bb7f3b02e22da2b0ab7280 # this is the sts static thumbprint
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: status.clusterOIDC
      toFieldPath: spec.forProvider.url
      transforms:
      - type: string
        string:
          fmt: "https://%s"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: karpenter-fargate-profile
    base:
      apiVersion: eks.aws.upbound.io/v1beta1
      kind: FargateProfile
      metadata:
      spec:
        deletionPolicy: Orphan
        forProvider:
          clusterNameRef:
            name: #patchme
          podExecutionRoleArnRef:
            name: #patchme
          region: #patchme
          selector:
            - namespace: karpenter
          subnetIdRefs:
          - name: #patchme
          - name: #patchme
          - name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-1'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.clusterNameRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.podExecutionRoleArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-fargate-execution'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.subnetIdRefs[0].name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1a'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.subnetIdRefs[1].name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1b'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.subnetIdRefs[2].name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1c'

  - name: eks-kms-key
    base:
      apiVersion: kms.aws.upbound.io/v1beta1
      kind: Key
      spec:
        deletionPolicy: Orphan
        forProvider:
          #enableKeyRotation: true
          #policy: |-
          region: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-eks-kms-key'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.eksKmsArn

  - name: ebs-kms-key
    base:
      apiVersion: kms.aws.upbound.io/v1beta1
      kind: Key
      spec:
        deletionPolicy: Orphan
        forProvider:
          #enableKeyRotation: true
          #policy: |-
          region: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-ebs-kms-key'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.ebsKmsArn

# ########
# # IAM Instance Profiles
# ########

  - name: karpenter-instance-profile
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: InstanceProfile
      spec:
        deletionPolicy: Orphan
        forProvider:
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-cluster'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: karpenter-instance-profile-1
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: InstanceProfile
      metadata:
        annotations:
          crossplane.io/external-name: karpenter
      spec:
        deletionPolicy: Orphan
        forProvider:
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-1'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-cluster'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

# ########
# # IAM Roles
# ########

  - name: postgres-operator-s3-backups-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: postgres-pod-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-postgres-operator"
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required
      - type: CombineFromComposite
        toFieldPath: spec.forProvider.assumeRolePolicy
        policy:
          fromFieldPath: Required
        combine:
          variables:
            - fromFieldPath: status.id
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
          strategy: string
          string:
            fmt: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                      "StringEquals": {
                          "%s:sub": [
                          "system:serviceaccount:databases:postgres-pod"],
                          "%s:aud": "sts.amazonaws.com"
                      }
                    }
                  }
                ]
              }
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: status.postgresOperatorRoleName

  - name: airbyte-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: airbyte-admin
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-airbyte"
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required
      - type: CombineFromComposite
        toFieldPath: spec.forProvider.assumeRolePolicy
        policy:
          fromFieldPath: Required
        combine:
          variables:
            - fromFieldPath: status.id
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
          strategy: string
          string:
            fmt: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                      "StringEquals": {
                          "%s:sub": ["system:serviceaccount:airbyte:airbyte-admin", "system:serviceaccount:data-tooling:airbyte-admin"],
                          "%s:aud": "sts.amazonaws.com"
                      }
                    }
                  }
                ]
              }
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: status.airbyteAdminRoleName

  - name: airbyte-warehouse-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
        - type: string
          string:
            fmt: '%s-airbyte'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
        - type: string
          string:
            fmt: '%s-warehouse'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-airbyte-warehouse-policy-attachment'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: mlflow-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: mlflow-role
        labels:
          role: mlflow-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-mlflow"
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required
      - type: CombineFromComposite
        toFieldPath: spec.forProvider.assumeRolePolicy
        policy:
          fromFieldPath: Required
        combine:
          variables:
            - fromFieldPath: status.id
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
          strategy: string
          string:
            fmt: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                      "StringEquals": {
                          "%s:sub": [
                          "system:serviceaccount:data-tooling:mlflow"],
                          "%s:aud": "sts.amazonaws.com"
                      }
                    }
                  }
                ]
              }
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: status.mlflowRoleName

  - name: api-service-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: api-service-role
        labels:
          role: api-service-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-api-service"
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required
      - type: CombineFromComposite
        toFieldPath: spec.forProvider.assumeRolePolicy
        policy:
          fromFieldPath: Required
        combine:
          variables:
            - fromFieldPath: status.id
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
          strategy: string
          string:
            fmt: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                      "StringEquals": {
                          "%s:sub": [
                          "system:serviceaccount:data-tooling:api-service"],
                          "%s:aud": "sts.amazonaws.com"
                      }
                    }
                  }
                ]
              }
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: status.apiServiceRoleName

  - name: data-service-external-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: data-service-external-role
        labels:
          role: data-service-external-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-data-service-external"
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required
      - type: CombineFromComposite
        toFieldPath: spec.forProvider.assumeRolePolicy
        policy:
          fromFieldPath: Required
        combine:
          variables:
            - fromFieldPath: status.id
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
          strategy: string
          string:
            fmt: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                      "StringEquals": {
                          "%s:sub": [
                          "system:serviceaccount:data-tooling:data-service-external"],
                          "%s:aud": "sts.amazonaws.com"
                      }
                    }
                  }
                ]
              }
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: status.dataServiceExternalRoleName

  - name: data-lineage-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: data-lineage-role
        labels:
          role: data-lineage-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-data-lineage"
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required
      - type: CombineFromComposite
        toFieldPath: spec.forProvider.assumeRolePolicy
        policy:
          fromFieldPath: Required
        combine:
          variables:
            - fromFieldPath: status.id
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
          strategy: string
          string:
            fmt: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                      "StringEquals": {
                          "%s:sub": [
                          "system:serviceaccount:services:data-lineage"],
                          "%s:aud": "sts.amazonaws.com"
                      }
                    }
                  }
                ]
              }
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: status.dataLineageRoleName

  - name: load-balancer-controller-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: load-balancer-controller
        labels:
          role: load-balancer-controller-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-load-balancer-controller"
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required
      - type: CombineFromComposite
        toFieldPath: spec.forProvider.assumeRolePolicy
        policy:
          fromFieldPath: Required
        combine:
          variables:
            - fromFieldPath: status.id
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
          strategy: string
          string:
            fmt: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                      "StringEquals": {
                          "%s:sub": [
                          "system:serviceaccount:addons:aws-load-balancer-controller"],
                          "%s:aud": "sts.amazonaws.com"
                      }
                    }
                  }
                ]
              }
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: status.ALBRoleName

  - name: data-service-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: data-service-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-data-service"
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required
      - type: CombineFromComposite
        toFieldPath: spec.forProvider.assumeRolePolicy
        policy:
          fromFieldPath: Required
        combine:
          variables:
            - fromFieldPath: status.id
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
          strategy: string
          string:
            fmt: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                      "StringEquals": {
                          "%s:sub": [
                          "system:serviceaccount:data-tooling:data-service"],
                          "%s:aud": "sts.amazonaws.com"
                      }
                    }
                  }
                ]
              }
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: status.dataServiceRoleName

  - name: dataflow-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: dataflow-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-dataflow"
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required
      - type: CombineFromComposite
        toFieldPath: spec.forProvider.assumeRolePolicy
        policy:
          fromFieldPath: Required
        combine:
          variables:
            - fromFieldPath: status.id
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
          strategy: string
          string:
            fmt: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                      "StringEquals": {
                          "%s:sub": "system:serviceaccount:data-tooling:dataflow-listener",
                          "%s:aud": "sts.amazonaws.com"
                      }
                    }
                  }
                ]
              }
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: status.dataFlowRoleName

  - name: exec-service-python-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: exec-service-python-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-exec-service-python"
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required
      - type: CombineFromComposite
        toFieldPath: spec.forProvider.assumeRolePolicy
        policy:
          fromFieldPath: Required
        combine:
          variables:
            - fromFieldPath: status.id
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
          strategy: string
          string:
            fmt: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                      "StringEquals": {
                          "%s:sub": [
                          "system:serviceaccount:services:exec-service-python"],
                          "%s:aud": "sts.amazonaws.com"
                      }
                    }
                  }
                ]
              }
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: status.execServicePythonRoleName

  - name: solutionengine-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: solutionengine-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-solutionengine"
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required
      - type: CombineFromComposite
        toFieldPath: spec.forProvider.assumeRolePolicy
        policy:
          fromFieldPath: Required
        combine:
          variables:
            - fromFieldPath: status.id
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
          strategy: string
          string:
            fmt: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                      "StringEquals": {
                          "%s:sub": [
                          "system:serviceaccount:services:solution-engine-sa"],
                          "%s:aud": "sts.amazonaws.com"
                      }
                    }
                  }
                ]
              }
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: status.solutionEngineRoleName

  - name: chatubix-api-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: chatubix-api-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-chatubix-api"
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required
      - type: CombineFromComposite
        toFieldPath: spec.forProvider.assumeRolePolicy
        policy:
          fromFieldPath: Required
        combine:
          variables:
            - fromFieldPath: status.id
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
            - fromFieldPath: status.clusterOIDC
          strategy: string
          string:
            fmt: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "",
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                      "StringEquals": {
                          "%s:sub": [
                          "system:serviceaccount:data-tooling:chatubix-api"],
                          "%s:aud": "sts.amazonaws.com"
                      }
                    }
                  }
                ]
              }
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: status.chatUbixApiRoleName

  - name: organization-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: OrganizationAccountAccessRole
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "AWS": [
                                "{{ .Values.backofficeArgocdRoleArn }}",
                                "arn:aws:iam::543587022756:root"
                            ]
                        },
                        "Action": "sts:AssumeRole"
                    }
                ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-organization-role"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: fargate-profile-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: fargate-profile-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "eks-fargate-pods.amazonaws.com"
                        },
                        "Action": "sts:AssumeRole"
                    }
                ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-fargate-execution"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.fargateExecRoleArn
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.fargateExecRoleName

  - name: karpenter-irsa-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: karpenter-irsa-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-karpenter"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": "system:serviceaccount:karpenter:karpenter",
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.karpenterIRSARoleArn
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.karpenterIRSARoleName

  - name: karpenter-cluster-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: karpenter-cluster-role
        labels:
          role: karpenter-cluster-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "EKSNodeAssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        },
                        "Action": "sts:AssumeRole"
                    }
                ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-karpenter-cluster"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.karpenterClusterRoleArn
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.karpenterClusterRoleName

  - name: vpc-cni-addon-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: vpc-cni-role
        labels:
          role: vpc-cni-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-vpc-cni"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": "system:serviceaccount:kube-system:aws-node",
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.vpcCniRoleArn
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.vpcCniRoleName

  - name: iamrole-controlplane
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: controlplane-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "eks.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-controlplane'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.labels.role
      transforms:
      - type: string
        string:
          fmt: '%s-controlplane'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: iamrole-nodegroup
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: nodegroup-role
        labels:
          role: nodegroup-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "ec2.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: iamrole-ebs-csi-driver
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: ebs-csi-driver-role
        labels:
          role: ebs-csi-driver-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-ebs-csi-driver"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": "system:serviceaccount:addons:ebs-csi-controller-sa",
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }

  - name: iamrole-external-dns
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: external-dns-role
        labels:
          role: external-dns-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-external-dns"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": "system:serviceaccount:addons:external-dns",
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.externalDnsRoleArn

  - name: iamrole-cert-manager
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: cert-manager-role
        labels:
          role: cert-manager-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-cert-manager"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": "system:serviceaccount:addons:cert-manager",
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.certManagerRoleArn

  - name: iamrole-external-data-upload
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: external-data-upload-role
        labels:
          role: external-data-upload-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
          maxSessionDuration: 43200
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-external-data-upload"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.dataspaceBackendRoleArn
      toFieldPath: spec.forProvider.assumeRolePolicy
      transforms:
      - type: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": [
                      "%s"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.externalDataUploadRoleArn

  - name: iamrole-dataspace-backend
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: dataspace-backend-role
        labels:
          role: dataspace-backend-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
          maxSessionDuration: 43200
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-dataspace-backend"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": "system:serviceaccount:services:dataspace-backend",
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.dataspaceBackendRoleArn

  - name: iamrole-s3-velero
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: s3-velero-role
        labels:
          role: s3-velero-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-s3-velero"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": "system:serviceaccount:addons:s3-velero-sa",
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }

  - name: iamrole-warehouse
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: warehouse-role
        labels:
          role: warehouse-role
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-warehouse"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": "system:serviceaccount:data-tooling:warehouse-sa",
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }

  - name: iamrole-spark-thrift-server
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: spark
        labels:
          role: spark
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-spark"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": "system:serviceaccount:data-tooling:spark",
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }

  - name: iamrole-kafka-connect-thrift-server
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: kafka-connect
        labels:
          role: kafka-connect
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-kafka-connect"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": "system:serviceaccount:kafka:kafka-connect-connect",
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }


  - name: iamrole-metastore
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: metastore
        labels:
          role: metastore
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-metastore"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": "system:serviceaccount:data-tooling:metastore",
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }

  - name: iamrole-trino
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: trino
        labels:
          role: trino
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-trino"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": "system:serviceaccount:data-tooling:trino",
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }

  - name: iamrole-llm-api
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        annotations:
          crossplane.io/external-name: llm-api
        labels:
          role: llm-api
      spec:
        deletionPolicy: Orphan
        forProvider:
          assumeRolePolicy: ""
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: "%s-llm-api"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": "system:serviceaccount:data-tooling:llm-api",
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }

# ########
# # IAM Policies
# ########

  - name: postgres-operator-s3-backups-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: postgres-operator-s3-backups-policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}" #patchme
    patches:
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.id
        strategy: string
        string:
          fmt: |
              {
                  "Statement": [
                      {
                          "Action": [
                              "s3:*"
                          ],
                          "Effect": "Allow",
                          "Resource": [
                              "arn:aws:s3:::postgres-backups-%s",
                              "arn:aws:s3:::postgres-backups-%s/*"
                          ]
                      }
                  ],
                  "Version": "2012-10-17"
              }
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-postgres-operator-s3-backups-full-access"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.postgresOperatorS3PolicyArn

  - name: airbyte-artifacts-full-access-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: airbyte-artifacts-bucket-read-write-policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}" #patchme
    patches:
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.id
        strategy: string
        string:
          fmt: |
              {
                  "Statement": [
                      {
                          "Action": [
                              "s3:*"
                          ],
                          "Effect": "Allow",
                          "Resource": [
                              "arn:aws:s3:::airbyte-artifacts-%s",
                              "arn:aws:s3:::airbyte-artifacts-%s/*"
                          ]
                      }
                  ],
                  "Version": "2012-10-17"
              }
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-airbyte-artifacts-bucket-full-access"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.airbyteArtifactsFullAccessS3PolicyArn

  - name: ingestion-artifacts-s3-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: ingestion-artifacts-s3-full-access
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}" #patchme
    patches:
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.id
        strategy: string
        string:
          fmt: |
            {
                "Statement": [
                    {
                        "Sid": "",
                        "Action": [
                            "s3:*"
                        ],
                        "Effect": "Allow",
                        "Resource": [
                            "arn:aws:s3:::ingestion-artifacts-%s",
                            "arn:aws:s3:::ingestion-artifacts-%s/*",
                            "arn:aws:s3:::*-*-ingestion",
                            "arn:aws:s3:::*-*-ingestion/*"
                        ]
                    }
                ],
                "Version": "2012-10-17"
            }
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-ingestion-artifacts-s3-full-access"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.ingestionArtifactsS3PolicyArn

  - name: execution-artifacts-s3-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: execution-artifacts-s3-full-access
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}" #patchme
    patches:
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.id
        strategy: string
        string:
          fmt: |
              {
                  "Statement": [
                      {
                          "Action": [
                              "s3:*"
                          ],
                          "Effect": "Allow",
                          "Resource": [
                              "arn:aws:s3:::execution-artifacts-%s",
                              "arn:aws:s3:::execution-artifacts-%s/*"
                          ]
                      }
                  ],
                  "Version": "2012-10-17"
              }
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-execution-artifacts-s3-full-access"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.executionArtifactsS3PolicyArn

  - name: execution-artifacts-s3-policy-readonly
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: execution-artifacts-s3-read-only
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}" #patchme
    patches:
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.id
        strategy: string
        string:
          fmt: |
              {
                  "Statement": [
                      {
                          "Action": [
                              "s3:GetObject",
                              "s3:ListBucket"
                          ],
                          "Effect": "Allow",
                          "Resource": [
                              "arn:aws:s3:::execution-artifacts-%s",
                              "arn:aws:s3:::execution-artifacts-%s/*"
                          ]
                      }
                  ],
                  "Version": "2012-10-17"
              }
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-execution-artifacts-s3-read-only"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.executionArtifactsS3PolicyReadonlyArn

  - name: load-balancer-controller-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: AmazonEKS_AWS_Load_Balancer_Controller
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: |
                {
                    "Statement": [
                        {
                            "Action": "iam:CreateServiceLinkedRole",
                            "Condition": {
                                "StringEquals": {
                                    "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
                                }
                            },
                            "Effect": "Allow",
                            "Resource": "*",
                            "Sid": ""
                        },
                        {
                            "Action": [
                                "elasticloadbalancing:DescribeTargetHealth",
                                "elasticloadbalancing:DescribeTargetGroups",
                                "elasticloadbalancing:DescribeTargetGroupAttributes",
                                "elasticloadbalancing:DescribeTags",
                                "elasticloadbalancing:DescribeSSLPolicies",
                                "elasticloadbalancing:DescribeRules",
                                "elasticloadbalancing:DescribeLoadBalancers",
                                "elasticloadbalancing:DescribeLoadBalancerAttributes",
                                "elasticloadbalancing:DescribeListeners",
                                "elasticloadbalancing:DescribeListenerCertificates",
                                "elasticloadbalancing:AddTags",
                                "ec2:GetCoipPoolUsage",
                                "ec2:DescribeVpcs",
                                "ec2:DescribeVpcPeeringConnections",
                                "ec2:DescribeTags",
                                "ec2:DescribeSubnets",
                                "ec2:DescribeSecurityGroups",
                                "ec2:DescribeNetworkInterfaces",
                                "ec2:DescribeInternetGateways",
                                "ec2:DescribeInstances",
                                "ec2:DescribeCoipPools",
                                "ec2:DescribeAvailabilityZones",
                                "ec2:DescribeAddresses",
                                "ec2:DescribeAccountAttributes"
                            ],
                            "Effect": "Allow",
                            "Resource": "*",
                            "Sid": ""
                        },
                        {
                            "Action": [
                                "wafv2:GetWebACLForResource",
                                "wafv2:GetWebACL",
                                "wafv2:DisassociateWebACL",
                                "wafv2:AssociateWebACL",
                                "waf-regional:GetWebACLForResource",
                                "waf-regional:GetWebACL",
                                "waf-regional:DisassociateWebACL",
                                "waf-regional:AssociateWebACL",
                                "shield:GetSubscriptionState",
                                "shield:DescribeProtection",
                                "shield:DeleteProtection",
                                "shield:CreateProtection",
                                "iam:ListServerCertificates",
                                "iam:GetServerCertificate",
                                "cognito-idp:DescribeUserPoolClient",
                                "acm:ListCertificates",
                                "acm:DescribeCertificate"
                            ],
                            "Effect": "Allow",
                            "Resource": "*",
                            "Sid": ""
                        },
                        {
                            "Action": [
                                "ec2:RevokeSecurityGroupIngress",
                                "ec2:CreateSecurityGroup",
                                "ec2:AuthorizeSecurityGroupIngress"
                            ],
                            "Effect": "Allow",
                            "Resource": "*",
                            "Sid": ""
                        },
                        {
                            "Action": "ec2:CreateTags",
                            "Condition": {
                                "Null": {
                                    "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                                },
                                "StringEquals": {
                                    "ec2:CreateAction": "CreateSecurityGroup"
                                }
                            },
                            "Effect": "Allow",
                            "Resource": "arn:aws:ec2:*:*:security-group/*",
                            "Sid": ""
                        },
                        {
                            "Action": [
                                "ec2:DeleteTags",
                                "ec2:CreateTags"
                            ],
                            "Condition": {
                                "Null": {
                                    "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                }
                            },
                            "Effect": "Allow",
                            "Resource": "arn:aws:ec2:*:*:security-group/*",
                            "Sid": ""
                        },
                        {
                            "Action": [
                                "ec2:RevokeSecurityGroupIngress",
                                "ec2:DeleteSecurityGroup",
                                "ec2:AuthorizeSecurityGroupIngress"
                            ],
                            "Condition": {
                                "Null": {
                                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                }
                            },
                            "Effect": "Allow",
                            "Resource": "*",
                            "Sid": ""
                        },
                        {
                            "Action": [
                                "elasticloadbalancing:CreateTargetGroup",
                                "elasticloadbalancing:CreateLoadBalancer"
                            ],
                            "Condition": {
                                "Null": {
                                    "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                                }
                            },
                            "Effect": "Allow",
                            "Resource": "*",
                            "Sid": ""
                        },
                        {
                            "Action": [
                                "elasticloadbalancing:DeleteRule",
                                "elasticloadbalancing:DeleteListener",
                                "elasticloadbalancing:CreateRule",
                                "elasticloadbalancing:CreateListener"
                            ],
                            "Effect": "Allow",
                            "Resource": "*",
                            "Sid": ""
                        },
                        {
                            "Action": [
                                "elasticloadbalancing:RemoveTags",
                                "elasticloadbalancing:AddTags"
                            ],
                            "Condition": {
                                "Null": {
                                    "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                }
                            },
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                                "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                                "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                            ],
                            "Sid": ""
                        },
                        {
                            "Action": [
                                "elasticloadbalancing:RemoveTags",
                                "elasticloadbalancing:AddTags"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                                "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                                "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                                "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
                            ],
                            "Sid": ""
                        },
                        {
                            "Action": [
                                "elasticloadbalancing:SetSubnets",
                                "elasticloadbalancing:SetSecurityGroups",
                                "elasticloadbalancing:SetIpAddressType",
                                "elasticloadbalancing:ModifyTargetGroupAttributes",
                                "elasticloadbalancing:ModifyTargetGroup",
                                "elasticloadbalancing:ModifyLoadBalancerAttributes",
                                "elasticloadbalancing:DeleteTargetGroup",
                                "elasticloadbalancing:DeleteLoadBalancer"
                            ],
                            "Condition": {
                                "Null": {
                                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                                }
                            },
                            "Effect": "Allow",
                            "Resource": "*",
                            "Sid": ""
                        },
                        {
                            "Action": [
                                "elasticloadbalancing:RegisterTargets",
                                "elasticloadbalancing:DeregisterTargets"
                            ],
                            "Effect": "Allow",
                            "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                            "Sid": ""
                        },
                        {
                            "Action": [
                                "elasticloadbalancing:SetWebAcl",
                                "elasticloadbalancing:RemoveListenerCertificates",
                                "elasticloadbalancing:ModifyRule",
                                "elasticloadbalancing:ModifyListener",
                                "elasticloadbalancing:AddListenerCertificates"
                            ],
                            "Effect": "Allow",
                            "Resource": "*",
                            "Sid": ""
                        }
                    ],
                    "Version": "2012-10-17"
                }
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-load-balancer-controller"
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: status.ALBEKSPolicyArn


  - name: mlflow-artifacts-s3-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: mlflow-artifacts-s3-full-access
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}" #patchme
    patches:
      - type: CombineFromComposite
        toFieldPath: spec.forProvider.policy
        policy:
          fromFieldPath: Required
        combine:
          variables:
          - fromFieldPath: status.id
          - fromFieldPath: status.id
          strategy: string
          string:
            fmt: |
                {
                    "Statement": [
                        {
                            "Action": [
                                "s3:*"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:s3:::mlflow-artifacts-%s",
                                "arn:aws:s3:::mlflow-artifacts-%s/*"
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                }
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-mlflow-artifacts-s3-full-access"
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.id
        toFieldPath: status.mlflowArtifactsS3PolicyArn

  - name: karpenter-irsa-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: karpenter-irsa-policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-irsa'
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      combine:
        variables:
          - fromFieldPath: status.clusterName
          - fromFieldPath: status.clusterName
          - fromFieldPath: status.id
          - fromFieldPath: status.id
          - fromFieldPath: status.id
          - fromFieldPath: status.id
          - fromFieldPath: status.id
          - fromFieldPath: status.id
          - fromFieldPath: status.id
          - fromFieldPath: status.karpenterClusterRoleArn
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: status.id
          - fromFieldPath: spec.id
        strategy: string
        string:
          fmt: |
            {
                "Statement": [
                    {
                        "Action": [
                            "pricing:GetProducts",
                            "ec2:DescribeSubnets",
                            "ec2:DescribeSpotPriceHistory",
                            "ec2:DescribeSecurityGroups",
                            "ec2:DescribeLaunchTemplates",
                            "ec2:DescribeInstances",
                            "ec2:DescribeInstanceTypes",
                            "ec2:DescribeInstanceTypeOfferings",
                            "ec2:DescribeImages",
                            "ec2:DescribeAvailabilityZones",
                            "ec2:DescribeSpotPriceHistory",
                            "ec2:CreateTags",
                            "ec2:CreateLaunchTemplate",
                            "ec2:CreateFleet"
                        ],
                        "Effect": "Allow",
                        "Resource": "*",
                        "Sid": ""
                    },
                    {
                        "Action": [
                            "ec2:TerminateInstances",
                            "ec2:DeleteLaunchTemplate"
                        ],
                        "Condition": {
                            "StringEquals": {
                                "ec2:ResourceTag/karpenter.sh/discovery": "%s"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": "*",
                        "Sid": ""
                    },
                    {
                        "Action": "ec2:RunInstances",
                        "Condition": {
                            "StringEquals": {
                                "ec2:ResourceTag/karpenter.sh/discovery": "%s"
                            }
                        },
                        "Effect": "Allow",
                        "Resource": "arn:aws:ec2:*:%s:launch-template/*",
                        "Sid": ""
                    },
                    {
                        "Action": "ec2:RunInstances",
                        "Effect": "Allow",
                        "Resource": [
                            "arn:aws:ec2:*::image/*",
                            "arn:aws:ec2:*:%s:volume/*",
                            "arn:aws:ec2:*:%s:subnet/*",
                            "arn:aws:ec2:*:%s:spot-instances-request/*",
                            "arn:aws:ec2:*:%s:security-group/*",
                            "arn:aws:ec2:*:%s:network-interface/*",
                            "arn:aws:ec2:*:%s:instance/*"
                        ],
                        "Sid": ""
                    },
                    {
                        "Action": "ssm:GetParameter",
                        "Effect": "Allow",
                        "Resource": "arn:aws:ssm:*:*:parameter/aws/service/*",
                        "Sid": ""
                    },
                    {
                        "Action": "iam:PassRole",
                        "Effect": "Allow",
                        "Resource": "%s",
                        "Sid": ""
                    },
                    {
                        "Action": [
                            "sqs:ReceiveMessage",
                            "sqs:GetQueueUrl",
                            "sqs:GetQueueAttributes",
                            "sqs:DeleteMessage"
                        ],
                        "Effect": "Allow",
                        "Resource": "arn:aws:sqs:%s:%s:%s-karpenter-cluster",
                        "Sid": ""
                    }
                ],
                "Version": "2012-10-17"
            }
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.karpenterIRSAPolicyArn

  - name: karpenter-irsa-policy-v1beta1
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: karpenter-irsa-policy-v1beta1
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-irsa-v1beta1'
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      combine:
        variables:
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: status.clusterName
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: status.clusterName
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: status.clusterName
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: status.clusterName
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: status.id
          - fromFieldPath: status.clusterName
          - fromFieldPath: status.id
          - fromFieldPath: status.clusterName
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: status.clusterName
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: status.clusterName
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: status.clusterName
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: status.id
          - fromFieldPath: status.clusterName
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AllowScopedEC2InstanceActions",
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:ec2:%s::image/*",
                    "arn:aws:ec2:%s::snapshot/*",
                    "arn:aws:ec2:%s:*:spot-instances-request/*",
                    "arn:aws:ec2:%s:*:security-group/*",
                    "arn:aws:ec2:%s:*:subnet/*",
                    "arn:aws:ec2:%s:*:launch-template/*"
                  ],
                  "Action": [
                    "ec2:RunInstances",
                    "ec2:CreateFleet"
                  ]
                },
                {
                  "Sid": "AllowScopedEC2InstanceActionsWithTags",
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:ec2:%s:*:fleet/*",
                    "arn:aws:ec2:%s:*:instance/*",
                    "arn:aws:ec2:%s:*:volume/*",
                    "arn:aws:ec2:%s:*:network-interface/*",
                    "arn:aws:ec2:%s:*:launch-template/*"
                  ],
                  "Action": [
                    "ec2:RunInstances",
                    "ec2:CreateFleet",
                    "ec2:CreateLaunchTemplate"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "aws:RequestTag/kubernetes.io/cluster/%s": "owned"
                    },
                    "StringLike": {
                      "aws:RequestTag/karpenter.sh/nodepool": "*"
                    }
                  }
                },
                {
                  "Sid": "AllowScopedResourceCreationTagging",
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:ec2:%s:*:fleet/*",
                    "arn:aws:ec2:%s:*:instance/*",
                    "arn:aws:ec2:%s:*:volume/*",
                    "arn:aws:ec2:%s:*:network-interface/*",
                    "arn:aws:ec2:%s:*:launch-template/*"
                  ],
                  "Action": "ec2:CreateTags",
                  "Condition": {
                    "StringEquals": {
                      "aws:RequestTag/kubernetes.io/cluster/%s": "owned",
                      "ec2:CreateAction": [
                        "RunInstances",
                        "CreateFleet",
                        "CreateLaunchTemplate"
                      ]
                    },
                    "StringLike": {
                      "aws:RequestTag/karpenter.sh/nodepool": "*"
                    }
                  }
                },
                {
                  "Sid": "AllowScopedResourceTagging",
                  "Effect": "Allow",
                  "Resource": "arn:aws:ec2:%s:*:instance/*",
                  "Action": "ec2:CreateTags",
                  "Condition": {
                    "StringEquals": {
                      "aws:ResourceTag/kubernetes.io/cluster/%s": "owned"
                    },
                    "StringLike": {
                      "aws:ResourceTag/karpenter.sh/nodepool": "*"
                    },
                    "ForAllValues:StringEquals": {
                      "aws:TagKeys": [
                        "karpenter.sh/nodeclaim",
                        "Name"
                      ]
                    }
                  }
                },
                {
                  "Sid": "AllowScopedDeletion",
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:ec2:%s:*:instance/*",
                    "arn:aws:ec2:%s:*:launch-template/*"
                  ],
                  "Action": [
                    "ec2:TerminateInstances",
                    "ec2:DeleteLaunchTemplate"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "aws:ResourceTag/kubernetes.io/cluster/%s": "owned"
                    },
                    "StringLike": {
                      "aws:ResourceTag/karpenter.sh/nodepool": "*"
                    }
                  }
                },
                {
                  "Sid": "AllowRegionalReadActions",
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "ec2:DescribeAvailabilityZones",
                    "ec2:DescribeImages",
                    "ec2:DescribeInstances",
                    "ec2:DescribeInstanceTypeOfferings",
                    "ec2:DescribeInstanceTypes",
                    "ec2:DescribeLaunchTemplates",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeSpotPriceHistory",
                    "ec2:DescribeSubnets"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "aws:RequestedRegion": "%s"
                    }
                  }
                },
                {
                  "Sid": "AllowSSMReadActions",
                  "Effect": "Allow",
                  "Resource": "arn:aws:ssm:%s::parameter/aws/service/*",
                  "Action": "ssm:GetParameter"
                },
                {
                  "Sid": "AllowPricingReadActions",
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": "pricing:GetProducts"
                },
                {
                  "Sid": "AllowInterruptionQueueActions",
                  "Effect": "Allow",
                  "Resource": "arn:aws:sqs:%s:%s:%s-karpenter-int-queue",
                  "Action": [
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                    "sqs:GetQueueUrl",
                    "sqs:ReceiveMessage"
                  ]
                },
                {
                  "Sid": "AllowPassingInstanceRole",
                  "Effect": "Allow",
                  "Resource": "arn:aws:iam::%s:role/karpenter-cluster-role",
                  "Action": "iam:PassRole",
                  "Condition": {
                    "StringEquals": {
                      "iam:PassedToService": "ec2.amazonaws.com"
                    }
                  }
                },
                {
                  "Sid": "AllowScopedInstanceProfileCreationActions",
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": "iam:CreateInstanceProfile",
                  "Condition": {
                    "StringEquals": {
                      "aws:RequestTag/kubernetes.io/cluster/%s": "owned",
                      "aws:RequestTag/topology.kubernetes.io/region": "%s"
                    },
                    "StringLike": {
                      "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass": "*"
                    }
                  }
                },
                {
                  "Sid": "AllowScopedInstanceProfileTagActions",
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": "iam:TagInstanceProfile",
                  "Condition": {
                    "StringEquals": {
                      "aws:ResourceTag/kubernetes.io/cluster/%s": "owned",
                      "aws:ResourceTag/topology.kubernetes.io/region": "%s",
                      "aws:RequestTag/kubernetes.io/cluster/%s": "owned",
                      "aws:RequestTag/topology.kubernetes.io/region": "%s"
                    },
                    "StringLike": {
                      "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass": "*",
                      "aws:RequestTag/karpenter.k8s.aws/ec2nodeclass": "*"
                    }
                  }
                },
                {
                  "Sid": "AllowScopedInstanceProfileActions",
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": [
                    "iam:AddRoleToInstanceProfile",
                    "iam:RemoveRoleFromInstanceProfile",
                    "iam:DeleteInstanceProfile"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "aws:ResourceTag/kubernetes.io/cluster/%s": "owned",
                      "aws:ResourceTag/topology.kubernetes.io/region": "%s"
                    },
                    "StringLike": {
                      "aws:ResourceTag/karpenter.k8s.aws/ec2nodeclass": "*"
                    }
                  }
                },
                {
                  "Sid": "AllowInstanceProfileReadActions",
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": "iam:GetInstanceProfile"
                },
                {
                  "Sid": "AllowAPIServerEndpointDiscovery",
                  "Effect": "Allow",
                  "Resource": "arn:aws:eks:%s:%s:cluster/%s",
                  "Action": "eks:DescribeCluster"
                }
              ]
            }
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.karpenterIRSAPolicyArn

  - name: external-dns-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: external-dns-policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-external-dns'
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      combine:
        variables:
          - fromFieldPath: status.zoneId
        strategy: string
        string:
          fmt: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "ChangeResourceRecordSets",
                        "Effect": "Allow",
                        "Action": "route53:ChangeResourceRecordSets",
                        "Resource": "arn:aws:route53:::hostedzone/%s"
                    },
                    {
                        "Sid": "ListResourceRecordSetsAndHostedZones",
                        "Effect": "Allow",
                        "Action": [
                            "route53:ListResourceRecordSets",
                            "route53:ListHostedZones"
                        ],
                        "Resource": "*"
                    }
                ]
            }
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: cert-manager-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: cert-manager-policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "route53:GetChange",
                  "Resource": "arn:aws:route53:::change/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "route53:ChangeResourceRecordSets",
                    "route53:ListResourceRecordSets"
                  ],
                  "Resource": "arn:aws:route53:::hostedzone/*"
                },
                {
                  "Effect": "Allow",
                  "Action": "route53:ListHostedZonesByName",
                  "Resource": "*"
                }
              ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-cert-manager'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ingestion-artifacts-s3-write-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: ingestion-artifacts-s3-write-access
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}"
    patches:
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      combine:
        variables:
        - fromFieldPath: status.id
        - fromFieldPath: status.id
        strategy: string
        string:
          fmt: |
            {
              "Statement": [
                {
                  "Action": [
                    "s3:PutObject",
                    "s3:PutObjectAcl"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:s3:::ingestion-artifacts-%s/upload-data/*",
                    "arn:aws:s3:::*-*-ingestion/upload-data/*"
                  ],
                  "Sid": ""
                },
                {
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:s3:::ingestion-artifacts-%s",
                    "arn:aws:s3:::*-*-ingestion"
                  ],
                  "Sid": ""
                }
              ],
              "Version": "2012-10-17"
            }
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-ingestion-artifacts-s3-write-access"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.ingestionArtifactsS3WritePolicyArn

  - name: dataspace-backend-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: dataspace-backend-policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-dataspace-backend'
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      combine:
        variables:
          - fromFieldPath: status.externalDataUploadRoleArn
          - fromFieldPath: status.id
          - fromFieldPath: status.id
        strategy: string
        string:
          fmt: |
              {
                  "Statement": [
                      {
                          "Action": [
                              "sts:AssumeRole"
                          ],
                          "Effect": "Allow",
                          "Resource": [
                              "%s"
                          ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:PutObject",
                          "s3:GetObject",
                          "s3:ListBucket"
                        ],
                        "Resource": [
                          "arn:aws:s3:::ingestion-artifacts-%s/*",
                          "arn:aws:s3:::ingestion-artifacts-%s",
                          "arn:aws:s3:::*-*-ingestion/*",
                          "arn:aws:s3:::*-*-ingestion"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:ListAllMyBuckets"
                        ],
                        "Resource": "arn:aws:s3:::*"
                      }
                  ],
                  "Version": "2012-10-17"
              }
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: s3-velero-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: s3-velero-policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-s3-velero'
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      combine:
        variables:
          - fromFieldPath: status.id
          - fromFieldPath: status.id
        strategy: string
        string:
          fmt: |
              {
                 "Version": "2012-10-17",
                 "Statement": [
                      {
                          "Sid": "VeleroFullBucketAccess",
                          "Effect": "Allow",
                          "Action": [
                              "s3:ListBucket"
                          ],
                          "Resource": [
                              "arn:aws:s3:::velero-%s"
                          ]
                      },
                      {
                          "Sid": "VeleroFullObjectAccess",
                          "Effect": "Allow",
                          "Action": [
                              "s3:GetObject",
                              "s3:PutObject",
                              "s3:AbortMultipartUpload",
                              "s3:DeleteObject"
                          ],
                          "Resource": [
                              "arn:aws:s3:::velero-%s/*"
                          ]
                      }
                 ]
              }
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: warehouse-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: warehouse-policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse'
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      combine:
        variables:
          - fromFieldPath: status.id
          - fromFieldPath: status.id
        strategy: string
        string:
          fmt: |
              {
                 "Version": "2012-10-17",
                 "Statement": [
                      {
                          "Sid": "FullWarehouseAccess",
                          "Effect": "Allow",
                          "Action": [
                              "s3:*"
                          ],
                          "Resource": [
                              "arn:aws:s3:::warehouse-%s",
                              "arn:aws:s3:::warehouse-%s/*",
                              "arn:aws:s3:::*-*-warehouse",
                              "arn:aws:s3:::*-*-warehouse/*"
                          ]
                      },
                      {
                          "Sid": "ListAllBuckets",
                          "Effect": "Allow",
                          "Action": [
                              "s3:ListBucket"
                          ],
                          "Resource": [
                              "*"
                          ]
                      }
                 ]
              }
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: nix-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: nix-policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: |
            {
                 "Version": "2012-10-17",
                 "Statement": [
                      {
                          "Sid": "FullNixAccess",
                          "Effect": "Allow",
                          "Action": [
                              "s3:*"
                          ],
                          "Resource": [
                              "arn:aws:s3:::ubix-backoffice-cluster-nix-us-east-1",
                              "arn:aws:s3:::ubix-backoffice-cluster-nix-us-east-1/*"
                          ]
                      }
                 ]
              }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nix'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: resources-s3-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: resources-s3-policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: |
            {
                 "Version": "2012-10-17",
                 "Statement": [
                      {
                          "Sid": "ReadWrites3Bucket",
                          "Effect": "Allow",
                          "Action": [
                              "s3:PutObject",
                              "s3:GetObject",
                              "s3:ListBucket"
                          ],
                          "Resource": [
                              "arn:aws:s3:::resources.ubix.com",
                              "arn:aws:s3:::resources.ubix.com/*"
                          ]
                      }
                 ]
              }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-resources-s3-policy'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: warehouse-readonly-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: warehouse-read-only-policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse-read-only'
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      combine:
        variables:
          - fromFieldPath: status.id
          - fromFieldPath: status.id
        strategy: string
        string:
          fmt: |
              {
                 "Version": "2012-10-17",
                 "Statement": [
                      {
                          "Sid": "ReadOnlyWarehouseAccess",
                          "Effect": "Allow",
                          "Action": [
                              "s3:GetObject",
                              "s3:ListBucket"
                          ],
                          "Resource": [
                              "arn:aws:s3:::warehouse-%s",
                              "arn:aws:s3:::warehouse-%s/*",
                              "arn:aws:s3:::*-*-warehouse",
                              "arn:aws:s3:::*-*-warehouse/*"
                          ]
                      }
                 ]
              }
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: llm-api-cache-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: llm-api-cache-policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: "{}"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-llm-api'
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      combine:
        variables:
          - fromFieldPath: status.id
          - fromFieldPath: status.id
        strategy: string
        string:
          fmt: |
              {
                 "Version": "2012-10-17",
                 "Statement": [
                      {
                          "Sid": "",
                          "Effect": "Allow",
                          "Action": [
                              "s3:*"
                          ],
                          "Resource": [
                              "arn:aws:s3:::llm-api-cache-%s",
                              "arn:aws:s3:::llm-api-cache-%s/*"
                          ]
                      }
                 ]
              }
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: bedrock-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: bedrock-policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "BedrockAll",
                        "Effect": "Allow",
                        "Action": [
                            "bedrock:*"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Sid": "DescribeKey",
                        "Effect": "Allow",
                        "Action": [
                            "kms:DescribeKey"
                        ],
                        "Resource": "arn:*:kms:*:::*"
                    },
                    {
                        "Sid": "APIsWithAllResourceAccess",
                        "Effect": "Allow",
                        "Action": [
                            "iam:ListRoles",
                            "ec2:DescribeVpcs",
                            "ec2:DescribeSubnets",
                            "ec2:DescribeSecurityGroups"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Sid": "PassRoleToBedrock",
                        "Effect": "Allow",
                        "Action": [
                            "iam:PassRole"
                        ],
                        "Resource": "arn:aws:iam::*:role/*AmazonBedrock*",
                        "Condition": {
                            "StringEquals": {
                                "iam:PassedToService": [
                                    "bedrock.amazonaws.com"
                                ]
                            }
                        }
                    }
                ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-bedrock'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: chatubix-sts-bedrock-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      metadata:
        annotations:
          crossplane.io/external-name: bedrock-sts-policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "Statement1",
                        "Effect": "Allow",
                        "Action": [
                            "sts:AssumeRole"
                        ],
                        "Resource": [
                            "arn:aws:iam::*:role/*-bedrock"
                        ]
                    }
                ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-sts-bedrock'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

# ########
# # IAM Policy Attachments
# ########

  - name: postgres-operator-s3-backups-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-postgres-operator-s3-backups"
      - type: FromCompositeFieldPath
        fromFieldPath: status.postgresOperatorS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.postgresOperatorRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: airbyte-admin-airbyte-artifacts-bucket-full-access-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-airbyte-admin-airbyte-artifacts-bucket-full-access"
      - type: FromCompositeFieldPath
        fromFieldPath: status.airbyteArtifactsFullAccessS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.airbyteAdminRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: load-balancer-controller-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-load-balancer-controller"
      - type: FromCompositeFieldPath
        fromFieldPath: status.ALBEKSPolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.ALBRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: mlflow-artifacts-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-mlflow-artifacts"
      - type: FromCompositeFieldPath
        fromFieldPath: status.mlflowArtifactsS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.mlflowRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: airbyte-ingestion-artifacts-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-airbyte-ingestion-artifacts"
      - type: FromCompositeFieldPath
        fromFieldPath: status.ingestionArtifactsS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.airbyteAdminRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: data-service-ingestion-artifacts-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-data-service-ingestion-artifacts"
      - type: FromCompositeFieldPath
        fromFieldPath: status.ingestionArtifactsS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.dataServiceRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: data-service-external-ingestion-artifacts-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-data-service-external-ingestion-artifacts"
      - type: FromCompositeFieldPath
        fromFieldPath: status.ingestionArtifactsS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.dataServiceExternalRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: data-flow-listener-ingestion-artifacts-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-data-flow-listener-ingestion-artifacts"
      - type: FromCompositeFieldPath
        fromFieldPath: status.ingestionArtifactsS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.dataFlowRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: data-flow-listener-execution-artifacts-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-data-flow-listener-execution-artifacts"
      - type: FromCompositeFieldPath
        fromFieldPath: status.executionArtifactsS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.dataFlowRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: data-flow-listener-mlflow-artifacts-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-data-flow-listener-mlflow-artifacts"
      - type: FromCompositeFieldPath
        fromFieldPath: status.mlflowArtifactsS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.dataFlowRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: exec-service-python-execution-artifacts-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-exec-service-python-execution-artifacts"
      - type: FromCompositeFieldPath
        fromFieldPath: status.executionArtifactsS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.execServicePythonRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: solutionengine-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-solutionengine-resources-s3"
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: spec.forProvider.policyArnRef.name
        transforms:
        - type: string
          string:
            fmt: '%s-resources-s3-policy'
      - type: FromCompositeFieldPath
        fromFieldPath: status.solutionEngineRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: exec-service-python-nix-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-exec-service-python-nix"
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: spec.forProvider.policyArnRef.name
        transforms:
        - type: string
          string:
            fmt: '%s-nix'
      - type: FromCompositeFieldPath
        fromFieldPath: status.execServicePythonRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: exec-service-warehouse-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-exec-service-python-warehouse'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-exec-service-python'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: exec-service-python-mlflow-artifacts-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-exec-service-python-mlflow-artifacts"
      - type: FromCompositeFieldPath
        fromFieldPath: status.mlflowArtifactsS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.execServicePythonRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: chatubix-api-warehouse-read-only-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-chatubix-api-warehouse'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-chatubix-api'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse-read-only'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: fargate-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-fargate-execution'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-fargate-execution'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: fargate-cni-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-fargate-cni'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-fargate-execution'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: karpenter-eks-worker-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-eks-worker-node'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-cluster'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: karpenter-ec2-container-registry-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-ec2-container-registry'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-cluster'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: karpenter-ssm-managed-instance-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-ssm-managed-instance'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-cluster'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: karpenter-cni-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-cluster-cni'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-cluster'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: karpenter-irsa-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme # arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-irsa-attachment'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-irsa'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: karpenter-irsa-v1beta1-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme # arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-irsa-v1beta1-attachment'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-irsa-v1beta1'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-controlplane
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-controlplane'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-controlplane'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-service
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSServicePolicy
          roleRef:
            name: #patchme
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-service'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-controlplane'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-worker
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          roleRef:
            name: #patchme
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-worker'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-cni
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-cni'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-vpc-cni'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-registry
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          roleRef:
            name: #patch
      providerConfigRef:
        policy:
          resolve: "Always"
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-registry'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-ebs-csi-driver
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-ebs-csi-driver'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ebs-csi-driver'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-external-dns
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-external-dns'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-external-dns'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-external-dns'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-cert-manager
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-cert-manager'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-cert-manager'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-cert-manager'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: api-service-execution-artifacts-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-api-service-execution-artifacts"
      - type: FromCompositeFieldPath
        fromFieldPath: status.executionArtifactsS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.apiServiceRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: api-service-warehouse-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-api-service-warehouse'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-api-service'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: api-service-mlflow-artifacts-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-api-service-mlflow-artifacts"
      - type: FromCompositeFieldPath
        fromFieldPath: status.mlflowArtifactsS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.apiServiceRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: data-lineage-execution-artifacts-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-data-lineage-execution-artifacts"
      - type: FromCompositeFieldPath
        fromFieldPath: status.executionArtifactsS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.dataLineageRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: data-lineage-ingestion-artifacts-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-data-lineage-ingestion-artifacts"
      - type: FromCompositeFieldPath
        fromFieldPath: status.ingestionArtifactsS3PolicyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.dataLineageRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: iamattachment-external-data-upload
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-external-data-upload'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-external-data-upload'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ingestion-artifacts-s3-write-access'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-dataspace-backend
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-dataspace-backend'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-dataspace-backend'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-dataspace-backend'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: dataspace-backend-warehouse-readonly-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-dataspace-backend-warehouse-readonly'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-dataspace-backend'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse-read-only'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-s3-velero
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-s3-velero'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-s3-velero'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-s3-velero'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-warehouse
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: dataflow-execution-artifacts-policy-attachment-readonly
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArn: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-dataflow-execution-artifacts-read-only"
      - type: FromCompositeFieldPath
        fromFieldPath: status.executionArtifactsS3PolicyReadonlyArn
        toFieldPath: spec.forProvider.policyArn
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.dataFlowRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: iamattachment-dataflow-warehouse-full-access
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-dataflow-warehouse'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: "%s-dataflow"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-spark-warehouse-full-access
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-spark-warehouse-full-access'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-spark'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-kafkaConnect-warehouse-full-access
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-kafka-connect-warehouse-full-access'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-kafka-connect'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-metastore-warehouse-full-access
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-metastore-warehouse-full-access'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-metastore'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-trino-warehouse-read-only
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-trino-warehouse-read-only'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-trino'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse-read-only'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: karpenter-cluster-trino-bucket-ro-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-cluster-trino-warehouse-read-only'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-karpenter-cluster'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-warehouse-read-only'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: iamattachment-llm-api-full-access
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          roleRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-llm-api-full-access'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-llm-api'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-llm-api'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
      policy:
        fromFieldPath: Required

  - name: chatubix-sts-bedrock-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-sts-bedrock"
      - type: FromCompositeFieldPath
        fromFieldPath: status.chatUbixApiRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: spec.forProvider.policyArnRef.name
        transforms:
        - type: string
          string:
            fmt: '%s-sts-bedrock'
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: api-service-bedrock-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-api-service-bedrock"
      - type: FromCompositeFieldPath
        fromFieldPath: status.apiServiceRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: spec.forProvider.policyArnRef.name
        transforms:
        - type: string
          string:
            fmt: '%s-bedrock'
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: chatubix-api-bedrock-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-chatubix-api-bedrock"
      - type: FromCompositeFieldPath
        fromFieldPath: status.chatUbixApiRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: spec.forProvider.policyArnRef.name
        transforms:
        - type: string
          string:
            fmt: '%s-bedrock'
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: exec-service-python-bedrock-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-exec-service-python-bedrock"
      - type: FromCompositeFieldPath
        fromFieldPath: status.execServicePythonRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: spec.forProvider.policyArnRef.name
        transforms:
        - type: string
          string:
            fmt: '%s-bedrock'
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

  - name: dataflow-bedrock-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        deletionPolicy: Orphan
        forProvider:
          policyArnRef:
            name: #patchme
          role: #patchme
    patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-dataflow-bedrock"
      - type: FromCompositeFieldPath
        fromFieldPath: status.dataFlowRoleName
        toFieldPath: spec.forProvider.role
        policy:
          fromFieldPath: Required
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: spec.forProvider.policyArnRef.name
        transforms:
        - type: string
          string:
            fmt: '%s-bedrock'
      - type: FromCompositeFieldPath
        fromFieldPath: status.id
        toFieldPath: spec.providerConfigRef.name
        policy:
          fromFieldPath: Required

#####
# ArgoCD
#####
  - name: argocd-secret-remote-cluster-credentials
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Secret
            metadata:
              name: # patched
              namespace: argocd
              labels:
                argocd.argoproj.io/secret-type: cluster
            # stringData:
              # name: # patched
              # server: # patched
              # config:
              #   awsAuthConfig:
              #       clusterName: # patched
              #       roleARN: # patched
            type: Opaque
        providerConfigRef:
          name: kubernetes-provider
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: spec.forProvider.manifest.metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-argocd-cluster-secret"
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: spec.forProvider.manifest.stringData.name
      - type: FromCompositeFieldPath
        fromFieldPath: status.clusterEndpoint
        toFieldPath: spec.forProvider.manifest.stringData.server
        policy:
          fromFieldPath: Required
      - type: CombineFromComposite
        policy:
          fromFieldPath: Required
        combine:
          variables:
            - fromFieldPath: status.clusterCertificateAuthorityData
            - fromFieldPath: spec.id
            - fromFieldPath: status.id
          strategy: string
          string:
            fmt: |
              {
                "tlsClientConfig":{
                  "insecure":false,
                  "caData":"%s"
                },
                "awsAuthConfig":{
                  "clusterName":"%s",
                  "roleARN":"arn:aws:iam::%s:role/OrganizationAccountAccessRole"
                }
              }
        toFieldPath: spec.forProvider.manifest.stringData.config
        policy:
          fromFieldPath: Required


#####
# Grafana Resources
#####

  - name: grafana-data-sources
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Secret
            metadata:
              name: # patched
              namespace: addons
              labels:
                grafana_datasource: "1"
            # stringData:
              # name: # patched
              # server: # patched
              # config:
              #   awsAuthConfig:
              #       clusterName: # patched
              #       roleARN: # patched
            type: Opaque
        providerConfigRef:
          name: kubernetes-provider
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-grafana-data-sources"
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: spec.forProvider.manifest.metadata.name
        transforms:
          - type: string
            string:
              fmt: "%s-grafana-data-sources"
      - type: CombineFromComposite
        policy:
          fromFieldPath: Required
        toFieldPath: spec.forProvider.manifest.stringData
        combine:
          variables:
            - fromFieldPath: spec.id
            - fromFieldPath: spec.id
            - fromFieldPath: spec.id
            - fromFieldPath: spec.id
            - fromFieldPath: spec.id
            - fromFieldPath: spec.id
            - fromFieldPath: spec.id
            - fromFieldPath: spec.id
            - fromFieldPath: spec.id
            - fromFieldPath: spec.id
            - fromFieldPath: spec.id
            - fromFieldPath: spec.id
            - fromFieldPath: spec.id
          strategy: string
          string:
            # this section needs to be like this due to crossplane limitations.
            # to edit the grafana yaml copy the string value and use a json to yaml converter
            # then copy it back using the single line json format
            fmt: '{"%s.yaml": "apiVersion: 1\ndeleteDatasources:\n- name: Mimir %s\n- name: Tempo %s\n- name: Loki %s\ndatasources:\n- name: Mimir %s\n  type: prometheus\n  typeName: Prometheus\n  typeLogoUrl: https://grafana.com/static/img/logos/logo-mimir.svg\n  access: proxy\n  url: http://mimir-gateway/prometheus\n  basicAuth: true\n  basicAuthUser: {{ .Values.mimir.user }}\n  jsonData:\n    httpHeaderName1: \"X-Scope-OrgID\"\n  secureJsonData:\n    httpHeaderValue1: \"%s\"\n    basicAuthPassword: {{ .Values.mimir.password }}\n  isDefault: false\n  readOnly: true\n- name: Tempo %s\n  type: tempo\n  access: proxy\n  url: http://tempo-gateway\n  basicAuth: true\n  basicAuthUser: {{ .Values.tempo.user }}\n  jsonData:\n    httpHeaderName1: \"X-Scope-OrgID\"\n    serviceMap:\n      datasourceUid: \"Mimir %s\"\n    nodeGraph:\n      enabled: true\n    lokiSearch:\n      datasourceUid: \"Loki %s\"\n    traceToLogs:\n      datasourceUid: \"Loki %s\"\n      tags: [\"k8s.pod.name\"]\n      mappedTags: [{ key: \"k8s.pod.name\", value: \"k8s_pod_name\" }]\n      mapTagNamesEnabled: true\n      spanStartTimeShift: \"-1h\"\n      spanEndTimeShift: \"1h\"\n      filterByTraceID: true\n      filterBySpanID: false\n  secureJsonData:\n    httpHeaderValue1: \"%s\"\n    basicAuthPassword: {{ .Values.tempo.password }}\n  isDefault: false\n  readOnly: true\n- name: Loki %s\n  type: loki\n  url: http://loki-query-frontend:3100\n  jsonData:\n    httpHeaderName1: \"X-Scope-OrgID\"\n  secureJsonData:\n    httpHeaderValue1: \"%s\"\n  isDefault: false\n  readOnly: true\n"}'
        transforms:
        - type: convert
          convert:
            toType: object
            format: json
        policy:
          fromFieldPath: Required

#####
# Route53
#####
  - name: route53-zone
    base:
      apiVersion: route53.aws.upbound.io/v1beta1
      kind: Zone
      spec:
        deletionPolicy: Orphan
        forProvider:
          name: #patchme
          config:
            comment: #patchme
            privateZone: false
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.name
      transforms:
        - type: string
          string:
            fmt: "%s.ubix.io"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.config.comment
      transforms:
        - type: string
          string:
            fmt: "%s.ubix.io-ZONE"
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.nameServers
      toFieldPath: status.zoneNameServers
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.zoneId
      toFieldPath: status.zoneId

  - name: route53-record
    base:
      apiVersion: route53.aws.upbound.io/v1beta1
      kind: Record
      spec:
        deletionPolicy: Orphan
        forProvider:
          name: #patchme
          type: NS
          ttl: 300
          zoneId: {{ .Values.zoneId }}
        providerConfigRef:
          name: root
    patches:
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: metadata.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.id
        toFieldPath: spec.forProvider.name
      - type: FromCompositeFieldPath
        fromFieldPath: spec.parameters.region
        toFieldPath: spec.forProvider.region
      - type: FromCompositeFieldPath
        fromFieldPath: status.zoneNameServers
        toFieldPath: spec.forProvider.records
        policy:
          fromFieldPath: Required

#####
# S3
#####

  - name: execution-artifacts-bucket
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: Bucket
      metadata:
        annotations:
          crossplane.io/external-name: #patchme
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      transforms:
      - type: string
        string:
          fmt: "%s-execution-artifacts"
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      transforms:
        - type: string
          string:
            fmt: "execution-artifacts-%s"
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.executionArtifactsBucketName

  - name: execution-artifacts-bucket-policies
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketPublicAccessBlock
      spec:
        deletionPolicy: Orphan
        forProvider:
          blockPublicAcls: true
          blockPublicPolicy: true
          ignorePublicAcls: true
          restrictPublicBuckets: true
          bucket: #patched
          region: #patched
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-execution-artifacts-bucket-policy'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.executionArtifactsBucketName
      toFieldPath: spec.forProvider.bucket
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: airbyte-artifacts-bucket
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: Bucket
      metadata:
        annotations:
          crossplane.io/external-name: #patchme
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      transforms:
      - type: string
        string:
          fmt: "%s-airbyte-artifacts"
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      transforms:
        - type: string
          string:
            fmt: "airbyte-artifacts-%s"
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: airbyte-artifacts-bucket-policies
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketPublicAccessBlock
      spec:
        deletionPolicy: Orphan
        forProvider:
          blockPublicAcls: true
          blockPublicPolicy: true
          ignorePublicAcls: true
          restrictPublicBuckets: true
          bucket: #patched
          region: #patched
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-airbyte-artifacts-bucket-policy'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.executionArtifactsBucketName
      toFieldPath: spec.forProvider.bucket
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ingestion-artifacts-bucket
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: Bucket
      metadata:
        annotations:
          crossplane.io/external-name: #patchme
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      transforms:
      - type: string
        string:
          fmt: "%s-ingestion-artifacts"
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      transforms:
        - type: string
          string:
            fmt: "ingestion-artifacts-%s"
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.ingestionArtifactsBucketName

  - name: ingestion-artifacts-bucket-policies
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketPublicAccessBlock
      spec:
        deletionPolicy: Orphan
        forProvider:
          blockPublicAcls: true
          blockPublicPolicy: true
          ignorePublicAcls: true
          restrictPublicBuckets: true
          bucket: #patched
          region: #patched
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-ingestion-artifacts-bucket-policy'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.ingestionArtifactsBucketName
      toFieldPath: spec.forProvider.bucket
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ingestion-artifacts-bucket-cors-config
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketCorsConfiguration
      spec:
        deletionPolicy: Orphan
        forProvider:
          bucketRef:
            name: #patchme
          corsRule:
            - allowedHeaders:
                - "*"
              allowedMethods:
                - PUT
              allowedOrigins:
                - patchme
          region: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-ingestion-artifacts-bucket-cors'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.bucketRef.name
      transforms:
        - type: string
          string:
            fmt: "%s-ingestion-artifacts"
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.corsRule[0].allowedOrigins[0]
      transforms:
        - type: string
          string:
            fmt: 'https://dataspace.%s.ubix.io'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: mlflow-artifacts-bucket
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: Bucket
      metadata:
        annotations:
          crossplane.io/external-name: #patchme
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      transforms:
      - type: string
        string:
          fmt: "%s-mlflow-artifacts"
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      transforms:
        - type: string
          string:
            fmt: "mlflow-artifacts-%s"
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.mlflowArtifactsBucketName

  - name: mlflow-artifacts-bucket-policies
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketPublicAccessBlock
      spec:
        deletionPolicy: Orphan
        forProvider:
          blockPublicAcls: true
          blockPublicPolicy: true
          ignorePublicAcls: true
          restrictPublicBuckets: true
          bucket: #patched
          region: #patched
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-mlflow-artifacts-bucket-policy'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.mlflowArtifactsBucketName
      toFieldPath: spec.forProvider.bucket
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: postgres-backups-bucket
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: Bucket
      metadata:
        annotations:
          crossplane.io/external-name: #patchme
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      transforms:
      - type: string
        string:
          fmt: "%s-postgres-backups"
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      transforms:
      - type: string
        string:
          fmt: "postgres-backups-%s"
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.id
      toFieldPath: status.postgresBackupsBucketName

  - name: postgres-backups-bucket-policies
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketPublicAccessBlock
      spec:
        deletionPolicy: Orphan
        forProvider:
          blockPublicAcls: true
          blockPublicPolicy: true
          ignorePublicAcls: true
          restrictPublicBuckets: true
          bucket: #patched
          region: #patched
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-postgres-backups-bucket-policy'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.postgresBackupsBucketName
      toFieldPath: spec.forProvider.bucket
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: velero-s3-bucket
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: Bucket
      metadata:
        annotations:
          crossplane.io/external-name: #patchme
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      transforms:
      - type: string
        string:
          fmt: "%s-velero"
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      transforms:
      - type: string
        string:
          fmt: "velero-%s"
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: velero-s3-bucket-policies
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketPublicAccessBlock
      spec:
        deletionPolicy: Orphan
        forProvider:
          blockPublicAcls: true
          blockPublicPolicy: true
          ignorePublicAcls: true
          restrictPublicBuckets: true
          bucket: #patched
          region: #patched
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-s3-velero-bucket-policy'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.forProvider.bucket
      transforms:
        - type: string
          string:
            fmt: 'velero-%s'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: warehouse-bucket
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: Bucket
      metadata:
        annotations:
          crossplane.io/external-name: #patchme
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      transforms:
      - type: string
        string:
          fmt: "%s-warehouse"
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      transforms:
      - type: string
        string:
          fmt: "warehouse-%s"
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: warehouse-bucket-policies
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketPublicAccessBlock
      spec:
        deletionPolicy: Orphan
        forProvider:
          blockPublicAcls: true
          blockPublicPolicy: true
          ignorePublicAcls: true
          restrictPublicBuckets: true
          bucket: #patched
          region: #patched
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-warehouse-bucket-policy'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.forProvider.bucket
      transforms:
        - type: string
          string:
            fmt: 'warehouse-%s'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: llm-api-cache-bucket
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: Bucket
      metadata:
        annotations:
          crossplane.io/external-name: #patchme
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      transforms:
      - type: string
        string:
          fmt: "%s-llm-api-cache"
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      transforms:
      - type: string
        string:
          fmt: "llm-api-cache-%s"
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: llm-api-cache-bucket-policies
    base:
      apiVersion: s3.aws.upbound.io/v1beta1
      kind: BucketPublicAccessBlock
      spec:
        deletionPolicy: Orphan
        forProvider:
          blockPublicAcls: true
          blockPublicPolicy: true
          ignorePublicAcls: true
          restrictPublicBuckets: true
          bucket: #patched
          region: #patched
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-llm-api-cache-bucket-policy'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.forProvider.bucket
      transforms:
        - type: string
          string:
            fmt: 'llm-api-cache-%s'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ecr-vpc-endpoint-subnet-association-1a
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: VPCEndpointSubnetAssociation
      spec:
        deletionPolicy: Orphan
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.privateSubnet1aID
      toFieldPath: spec.forProvider.subnetId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcEndpointIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ecr-vpce'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-ecr-vpce-1a'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ecr-vpc-endpoint-subnet-association-1b
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: VPCEndpointSubnetAssociation
      spec:
        deletionPolicy: Orphan
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.privateSubnet1bID
      toFieldPath: spec.forProvider.subnetId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcEndpointIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ecr-vpce'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-ecr-vpce-1b'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ecr-vpc-endpoint-subnet-association-1c
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: VPCEndpointSubnetAssociation
      spec:
        deletionPolicy: Orphan
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.privateSubnet1cID
      toFieldPath: spec.forProvider.subnetId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcEndpointIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ecr-vpce'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-ecr-vpce-1c'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ecr-vpce-security-group
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroup
      spec:
        deletionPolicy: Orphan
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-ecr-vpce'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.name
      transforms:
      - string:
          fmt: '%s-ecr-vpce'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ecr-vpce-security-group-rule-egress
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          cidrBlocks:
          - 0.0.0.0/0
          description: Allow egress from ECR vpce
          ipv6CidrBlocks:
          - ::/0
          fromPort: 0
          protocol: "-1"
          toPort: 0
          type: egress
          region: #patchme
          securityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-ecr-vpce-egress'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ecr-vpce'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ecr-vpce-security-group-rule-ingress
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: SecurityGroupRule
      spec:
        deletionPolicy: Orphan
        forProvider:
          cidrBlocks:
          - 10.0.0.0/16
          description: Allow ingress from Private Subnets to ECR
          fromPort: 0
          protocol: "TCP"
          toPort: 443
          type: ingress
          region: #patchme
          securityGroupIdRef:
            name: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-sg-rule-ecr-vpce-ingress'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-ecr-vpce'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ecr-vpc-endpoint-secgroup-association
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: VPCEndpointSecurityGroupAssociation
      spec:
        deletionPolicy: Orphan
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcEndpointIdRef.name
      transforms:
      - string:
          fmt: '%s-ecr-vpce'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.securityGroupIdRef.name
      transforms:
        - type: string
          string:
            fmt: '%s-ecr-vpce'

  - name: ecr-vpc-endpoint
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: VPCEndpoint
      spec:
        deletionPolicy: Orphan
        forProvider:
          vpcEndpointType: Interface
          privateDnsEnabled: true
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.serviceName
      transforms:
        - type: string
          string:
            fmt: 'com.amazonaws.%s.ecr.dkr'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-ecr-vpce'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ecr-s3-gateway-layers-vpce-rt-assoc-1
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: VPCEndpointRouteTableAssociation
      spec:
        deletionPolicy: Orphan
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: status.privateRouteTableID1
      toFieldPath: spec.forProvider.routeTableId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcEndpointIdRef.name
      transforms:
      - string:
          fmt: '%s-s3-gateway-vpce'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ecr-s3-gateway-layers-vpce-rt-assoc-2
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: VPCEndpointRouteTableAssociation
      spec:
        deletionPolicy: Orphan
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: status.privateRouteTableID2
      toFieldPath: spec.forProvider.routeTableId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcEndpointIdRef.name
      transforms:
      - string:
          fmt: '%s-s3-gateway-vpce'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ecr-s3-gateway-layers-vpce-rt-assoc-3
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: VPCEndpointRouteTableAssociation
      spec:
        deletionPolicy: Orphan
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: status.privateRouteTableID3
      toFieldPath: spec.forProvider.routeTableId
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcEndpointIdRef.name
      transforms:
      - string:
          fmt: '%s-s3-gateway-vpce'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: ecr-s3-gateway-layers-vpc-endpoint
    base:
      apiVersion: ec2.aws.upbound.io/v1beta1
      kind: VPCEndpoint
      spec:
        deletionPolicy: Orphan
        forProvider:
          vpcEndpointType: Gateway
          policy: |
            {
              "Version": "2008-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": "*",
                  "Resource": "*"
                }
              ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.serviceName
      transforms:
        - type: string
          string:
            fmt: 'com.amazonaws.%s.s3'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.vpcIdRef.name
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - string:
          fmt: '%s-s3-gateway-vpce'
        type: string
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  # - name: telemetry-vpc-endpoint
  #   base:
  #     apiVersion: ec2.aws.upbound.io/v1beta1
  #     kind: VPCEndpoint
  #     spec:
  #       deletionPolicy: Orphan
  #       forProvider:
  #         vpcEndpointType: Interface
  #         privateDnsEnabled: true
  #         serviceName: {{ .Values.telemetryVpcEndpointService }}
  #       providerConfigRef:
  #         name: backoffice
  #   patches:
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.parameters.region
  #     toFieldPath: spec.forProvider.region
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.vpcIdRef.name
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #     - string:
  #         fmt: '%s-telemetry-vpce'
  #       type: string
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: status.id
  #     toFieldPath: spec.providerConfigRef.name

  # - name: telemetry-vpce-allowed-principal
  #   base:
  #     apiVersion: ec2.aws.upbound.io/v1beta1
  #     kind: VPCEndpointServiceAllowedPrincipal
  #     spec:
  #       deletionPolicy: Orphan
  #       forProvider:
  #         vpcEndpointServiceId: {{ .Values.telemetryVpcEndpointServiceId }}
  #       providerConfigRef:
  #         name: backoffice
  #   patches:
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.parameters.region
  #     toFieldPath: spec.forProvider.region
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: status.id
  #     toFieldPath: spec.forProvider.principalArn
  #     policy:
  #       fromFieldPath: Required
  #     transforms:
  #     - string:
  #         fmt: 'arn:aws:iam::%s:root'
  #       type: string
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #     - string:
  #         fmt: '%s-telemetry-vpce-allowed-principal'
  #       type: string

  # - name: telemetry-vpc-endpoint-subnet-association-1a
  #   base:
  #     apiVersion: ec2.aws.upbound.io/v1beta1
  #     kind: VPCEndpointSubnetAssociation
  #     spec:
  #       deletionPolicy: Orphan
  #   patches:
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.parameters.region
  #     toFieldPath: spec.forProvider.region
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: status.privateSubnet1aID
  #     toFieldPath: spec.forProvider.subnetId
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.vpcEndpointIdRef.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-telemetry-vpce'
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-telemetry-vpce-1a'
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: status.id
  #     toFieldPath: spec.providerConfigRef.name

  # - name: telemetry-vpc-endpoint-subnet-association-1b
  #   base:
  #     apiVersion: ec2.aws.upbound.io/v1beta1
  #     kind: VPCEndpointSubnetAssociation
  #     spec:
  #       deletionPolicy: Orphan
  #   patches:
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.parameters.region
  #     toFieldPath: spec.forProvider.region
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: status.privateSubnet1bID
  #     toFieldPath: spec.forProvider.subnetId
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.vpcEndpointIdRef.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-telemetry-vpce'
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-telemetry-vpce-1b'
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: status.id
  #     toFieldPath: spec.providerConfigRef.name

  # - name: telemetry-vpc-endpoint-subnet-association-1c
  #   base:
  #     apiVersion: ec2.aws.upbound.io/v1beta1
  #     kind: VPCEndpointSubnetAssociation
  #     spec:
  #       deletionPolicy: Orphan
  #   patches:
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.parameters.region
  #     toFieldPath: spec.forProvider.region
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: status.privateSubnet1cID
  #     toFieldPath: spec.forProvider.subnetId
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.vpcEndpointIdRef.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-telemetry-vpce'
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-telemetry-vpce-1c'
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: status.id
  #     toFieldPath: spec.providerConfigRef.name

  # - name: telemetry-vpce-security-group
  #   base:
  #     apiVersion: ec2.aws.upbound.io/v1beta1
  #     kind: SecurityGroup
  #     spec:
  #       deletionPolicy: Orphan
  #   patches:
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #     - string:
  #         fmt: '%s-telemetry-vpce'
  #       type: string
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.name
  #     transforms:
  #     - string:
  #         fmt: '%s-telemetry-vpce'
  #       type: string
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.parameters.region
  #     toFieldPath: spec.forProvider.region
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.vpcIdRef.name
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: status.id
  #     toFieldPath: spec.providerConfigRef.name

  # - name: telemetry-vpce-security-group-rule-egress
  #   base:
  #     apiVersion: ec2.aws.upbound.io/v1beta1
  #     kind: SecurityGroupRule
  #     spec:
  #       deletionPolicy: Orphan
  #       forProvider:
  #         cidrBlocks:
  #         - 0.0.0.0/0
  #         description: Allow egress from telemetry vpce
  #         ipv6CidrBlocks:
  #         - ::/0
  #         fromPort: 0
  #         protocol: "-1"
  #         toPort: 0
  #         type: egress
  #         region: #patchme
  #         securityGroupIdRef:
  #           name: #patchme
  #   patches:
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #     - string:
  #         fmt: '%s-sg-rule-telemetry-vpce-egress'
  #       type: string
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.parameters.region
  #     toFieldPath: spec.forProvider.region
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.securityGroupIdRef.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-telemetry-vpce'
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: status.id
  #     toFieldPath: spec.providerConfigRef.name

  # - name: telemetry-vpce-security-group-rule-ingress
  #   base:
  #     apiVersion: ec2.aws.upbound.io/v1beta1
  #     kind: SecurityGroupRule
  #     spec:
  #       deletionPolicy: Orphan
  #       forProvider:
  #         cidrBlocks:
  #         - 10.0.0.0/16
  #         description: Allow ingress from Private Subnets to telemetry
  #         fromPort: 8080
  #         protocol: "TCP"
  #         toPort: 8082
  #         type: ingress
  #         region: #patchme
  #         securityGroupIdRef:
  #           name: #patchme
  #   patches:
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #     - string:
  #         fmt: '%s-sg-rule-telemetry-vpce-ingress'
  #       type: string
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.parameters.region
  #     toFieldPath: spec.forProvider.region
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.securityGroupIdRef.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-telemetry-vpce'
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: status.id
  #     toFieldPath: spec.providerConfigRef.name

  # - name: telemetry-vpc-endpoint-secgroup-association
  #   base:
  #     apiVersion: ec2.aws.upbound.io/v1beta1
  #     kind: VPCEndpointSecurityGroupAssociation
  #     spec:
  #       deletionPolicy: Orphan
  #   patches:
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.parameters.region
  #     toFieldPath: spec.forProvider.region
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.vpcEndpointIdRef.name
  #     transforms:
  #     - string:
  #         fmt: '%s-telemetry-vpce'
  #       type: string
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #     - string:
  #         fmt: '%s-vpce-security-group-association'
  #       type: string
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: status.id
  #     toFieldPath: spec.providerConfigRef.name
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: spec.forProvider.securityGroupIdRef.name
  #     transforms:
  #       - type: string
  #         string:
  #           fmt: '%s-telemetry-vpce'

  - name: cname-validation-record
    base:
      apiVersion: route53.aws.upbound.io/v1beta1
      kind: Record
      metadata:
        labels:
          resource: Record
          type: CNAME
      spec:
        deletionPolicy: Orphan
        forProvider:
          ttl: 300
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-cname-validation-record'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - fromFieldPath: status.zoneId
      toFieldPath: spec.forProvider.zoneId
    - fromFieldPath: status.certificateResourceRecordName
      policy:
        fromFieldPath: Required
      toFieldPath: spec.forProvider.name
    - fromFieldPath: status.certificateResourceRecordValue
      policy:
        fromFieldPath: Required
      toFieldPath: spec.forProvider.records[0]
    - fromFieldPath: status.certificateResourceRecordType
      policy:
        fromFieldPath: Required
      toFieldPath: spec.forProvider.type
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

### AWS LB resources

  - name: aws-lb-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-aws-lb-controller'
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      policy:
        fromFieldPath: Required
      combine:
        variables:
          - fromFieldPath: status.id
          - fromFieldPath: status.clusterOIDC
          - fromFieldPath: status.clusterOIDC
          - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": [
                        "system:serviceaccount:addons:aws-load-balancer-controller"],
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: aws-lb-controller-role-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "iam:CreateServiceLinkedRole"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "StringEquals": {
                                "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:DescribeAccountAttributes",
                            "ec2:DescribeAddresses",
                            "ec2:DescribeAvailabilityZones",
                            "ec2:DescribeInternetGateways",
                            "ec2:DescribeVpcs",
                            "ec2:DescribeVpcPeeringConnections",
                            "ec2:DescribeSubnets",
                            "ec2:DescribeSecurityGroups",
                            "ec2:DescribeInstances",
                            "ec2:DescribeNetworkInterfaces",
                            "ec2:DescribeTags",
                            "ec2:GetCoipPoolUsage",
                            "ec2:DescribeCoipPools",
                            "elasticloadbalancing:DescribeLoadBalancers",
                            "elasticloadbalancing:DescribeLoadBalancerAttributes",
                            "elasticloadbalancing:DescribeListeners",
                            "elasticloadbalancing:DescribeListenerCertificates",
                            "elasticloadbalancing:DescribeSSLPolicies",
                            "elasticloadbalancing:DescribeRules",
                            "elasticloadbalancing:DescribeTargetGroups",
                            "elasticloadbalancing:DescribeTargetGroupAttributes",
                            "elasticloadbalancing:DescribeTargetHealth",
                            "elasticloadbalancing:DescribeTags"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "cognito-idp:DescribeUserPoolClient",
                            "acm:ListCertificates",
                            "acm:DescribeCertificate",
                            "iam:ListServerCertificates",
                            "iam:GetServerCertificate",
                            "waf-regional:GetWebACL",
                            "waf-regional:GetWebACLForResource",
                            "waf-regional:AssociateWebACL",
                            "waf-regional:DisassociateWebACL",
                            "wafv2:GetWebACL",
                            "wafv2:GetWebACLForResource",
                            "wafv2:AssociateWebACL",
                            "wafv2:DisassociateWebACL",
                            "shield:GetSubscriptionState",
                            "shield:DescribeProtection",
                            "shield:CreateProtection",
                            "shield:DeleteProtection"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:AuthorizeSecurityGroupIngress",
                            "ec2:RevokeSecurityGroupIngress"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:CreateSecurityGroup"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:CreateTags"
                        ],
                        "Resource": "arn:aws:ec2:*:*:security-group/*",
                        "Condition": {
                            "StringEquals": {
                                "ec2:CreateAction": "CreateSecurityGroup"
                            },
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:CreateTags",
                            "ec2:DeleteTags"
                        ],
                        "Resource": "arn:aws:ec2:*:*:security-group/*",
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:AuthorizeSecurityGroupIngress",
                            "ec2:RevokeSecurityGroupIngress",
                            "ec2:DeleteSecurityGroup"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "Null": {
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:CreateLoadBalancer",
                            "elasticloadbalancing:CreateTargetGroup"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:CreateListener",
                            "elasticloadbalancing:DeleteListener",
                            "elasticloadbalancing:CreateRule",
                            "elasticloadbalancing:DeleteRule"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:AddTags",
                            "elasticloadbalancing:RemoveTags"
                        ],
                        "Resource": [
                            "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                            "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                            "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                        ],
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:AddTags",
                            "elasticloadbalancing:RemoveTags"
                        ],
                        "Resource": [
                            "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                            "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                            "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                            "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
                        ]
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:ModifyLoadBalancerAttributes",
                            "elasticloadbalancing:SetIpAddressType",
                            "elasticloadbalancing:SetSecurityGroups",
                            "elasticloadbalancing:SetSubnets",
                            "elasticloadbalancing:DeleteLoadBalancer",
                            "elasticloadbalancing:ModifyTargetGroup",
                            "elasticloadbalancing:ModifyTargetGroupAttributes",
                            "elasticloadbalancing:DeleteTargetGroup"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "Null": {
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:AddTags"
                        ],
                        "Resource": [
                            "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                            "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                            "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                        ],
                        "Condition": {
                            "StringEquals": {
                                "elasticloadbalancing:CreateAction": [
                                    "CreateTargetGroup",
                                    "CreateLoadBalancer"
                                ]
                            },
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:RegisterTargets",
                            "elasticloadbalancing:DeregisterTargets"
                        ],
                        "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:SetWebAcl",
                            "elasticloadbalancing:ModifyListener",
                            "elasticloadbalancing:AddListenerCertificates",
                            "elasticloadbalancing:RemoveListenerCertificates",
                            "elasticloadbalancing:ModifyRule"
                        ],
                        "Resource": "*"
                    }
                ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
        - type: string
          string:
            fmt: '%s-aws-lb-controller'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-aws-lb-controller-policy'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name


### Harbor resources
  - name: harbor-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      metadata:
        name: harbor
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-harbor'
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicy
      policy:
        fromFieldPath: Required
      combine:
        variables:
          - fromFieldPath: status.id
          - fromFieldPath: status.clusterOIDC
          - fromFieldPath: status.clusterOIDC
          - fromFieldPath: status.clusterOIDC
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                        "%s:sub": [
                        "system:serviceaccount:addons:harbor"],
                        "%s:aud": "sts.amazonaws.com"
                    }
                  }
                }
              ]
            }
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: harbor-policy
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Policy
      spec:
        deletionPolicy: Orphan
        forProvider:
          policy: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": "ecr:*"
                },
                {
                  "Effect": "Allow",
                  "Resource": "*",
                  "Action": "s3:*"
                }
              ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
        - type: string
          string:
            fmt: '%s-harbor'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-harbor-policy'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: harbor-policy-attachment
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: RolePolicyAttachment
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleRef.name
      transforms:
        - type: string
          string:
            fmt: '%s-harbor'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.policyArnRef.name
      transforms:
        - type: string
          string:
            fmt: '%s-harbor-policy'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-harbor-policy-attachment'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

###
# Cybersecurity
###

  - name: waf-webacl
    base:
      apiVersion: wafregional.aws.upbound.io/v1beta1
      kind: WebACL
      spec:
        deletionPolicy: Orphan
        forProvider:
          defaultAction:
          - type: "ALLOW"
          metricName: "CloudspaceWAFAclMetrics"
          name: "WAF-FOR-CLOUDSPACE"
          region: #patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-waf-acl'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: request-gpu-quota
    base:
      apiVersion: servicequotas.aws.upbound.io/v1beta1
      kind: ServiceQuota
      spec:
        deletionPolicy: Orphan
        forProvider:
          quotaCode: L-DB2E81BA
          serviceCode: ec2
          value: 240
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-gpu-quota'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: child-account-certificate
    base:
      apiVersion: acm.aws.upbound.io/v1beta1
      kind: Certificate
      spec:
        deletionPolicy: Orphan
        forProvider:
          domainName: # patchme
          region: # patchme
          validationMethod: DNS
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-certificate'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.domainName
      transforms:
        - type: string
          string:
            fmt: '*.%s.ubix.io'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.certificateArn
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.domainValidationOptions[0].domainName
      toFieldPath: status.certificateFQDN
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.domainValidationOptions[0].resourceRecordName
      toFieldPath: status.certificateResourceRecordName
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.domainValidationOptions[0].resourceRecordValue
      toFieldPath: status.certificateResourceRecordValue
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.domainValidationOptions[0].resourceRecordType
      toFieldPath: status.certificateResourceRecordType

  - name: child-account-certificate-validation
    base:
      apiVersion: acm.aws.upbound.io/v1beta1
      kind: CertificateValidation
      spec:
        deletionPolicy: Orphan
        forProvider:
          domainName: # patchme
          region: # patchme
          validationMethod: DNS
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-certificate-validation'
    - type: FromCompositeFieldPath
      fromFieldPath: status.certificateArn
      toFieldPath: spec.forProvider.certificateArn
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name


## karpenter spot instances config

  # - name: request-spot-quota
  #   base:
  #     apiVersion: servicequotas.aws.upbound.io/v1beta1
  #     kind: ServiceQuota
  #     spec:
  #       deletionPolicy: Orphan
  #       forProvider:
  #         quotaCode: L-34B43A08
  #         serviceCode: ec2
  #         value: 512
  #   patches:
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #       - type: string
  #         string:
  #           fmt: '%s-spot-quota'
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: spec.parameters.region
  #     toFieldPath: spec.forProvider.region
  #   - type: FromCompositeFieldPath
  #     fromFieldPath: status.id
  #     toFieldPath: spec.providerConfigRef.name

  - name: spot-service-linked-role
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: ServiceLinkedRole
      spec:
        deletionPolicy: Orphan
        forProvider:
          awsServiceName: spot.amazonaws.com
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-spot-servicelinkedrole'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: karpenter-interruption-queue
    base:
      apiVersion: sqs.aws.upbound.io/v1beta1
      kind: Queue
      spec:
        deletionPolicy: Orphan
        forProvider:
          name: # patchme
          region: # patchme
          policy: # patchme
          messageRetentionSeconds: 300
          sqsManagedSseEnabled: true
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-int-queue'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-int-queue'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.policy
      policy:
        fromFieldPath: Required
      combine:
        variables:
          - fromFieldPath: spec.parameters.region
          - fromFieldPath: spec.id
        strategy: string
        string:
          fmt: |
            {
              "Statement": [
                {
                  "Sid": "example",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": ["events.amazonaws.com", "sqs.amazonaws.com"]
                  },
                  "Action": "sqs:SendMessage",
                  "Resource": "arn:aws:sqs:%s:*:%s-karpenter-int-queue"
                }
              ]
            }
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.karpenterInterruptionQueueArn

  - name: karpenter-interruption-bus
    base:
      apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
      kind: Bus
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: # patchme
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-int-bus'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: karpenter-interruption-queue-event-1
    base:
      apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
      kind: Rule
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: # patchme
          eventPattern: |
            {
              "source": [
                "aws.health"
              ],
              "detail-type": [
                "AWS Health Event"
              ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-aws-health'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.eventBusName
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-int-bus'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: karpenter-interruption-queue-event-target-1
    base:
      apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
      kind: Target
      spec:
        deletionPolicy: Orphan
        forProvider:
          arn: # patchme
          region: # patchme
          targetId: SendToSQS
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-aws-health-target'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.ruleRef.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-aws-health'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.eventBusName
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-int-bus'
    - type: FromCompositeFieldPath
      fromFieldPath: status.karpenterInterruptionQueueArn
      toFieldPath: spec.forProvider.arn
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: karpenter-interruption-queue-event-2
    base:
      apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
      kind: Rule
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: # patchme
          eventPattern: |
            {
              "source": [
                "aws.ec2"
              ],
              "detail-type": [
                "EC2 Spot Instance Interruption Warning"
              ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-ec2-spot-int'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.eventBusName
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-int-bus'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: karpenter-interruption-queue-event-target-2
    base:
      apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
      kind: Target
      spec:
        deletionPolicy: Orphan
        forProvider:
          arn: # patchme
          region: # patchme
          targetId: SendToSQS
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-ec2-spot-int-target'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.ruleRef.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-ec2-spot-int'
    - type: FromCompositeFieldPath
      fromFieldPath: status.karpenterInterruptionQueueArn
      toFieldPath: spec.forProvider.arn
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.eventBusName
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-int-bus'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: karpenter-interruption-queue-event-3
    base:
      apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
      kind: Rule
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: # patchme
          eventPattern: |
            {
              "source": [
                "aws.ec2"
              ],
              "detail-type": [
                "EC2 Instance Rebalance Recommendation"
              ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-ec2-inst-rebalance'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.eventBusName
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-int-bus'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: karpenter-interruption-queue-event-target-3
    base:
      apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
      kind: Target
      spec:
        deletionPolicy: Orphan
        forProvider:
          arn: # patchme
          region: # patchme
          targetId: SendToSQS
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-ec2-inst-rebalance-target'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.ruleRef.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-ec2-inst-rebalance'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.eventBusName
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-int-bus'
    - type: FromCompositeFieldPath
      fromFieldPath: status.karpenterInterruptionQueueArn
      toFieldPath: spec.forProvider.arn
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: karpenter-interruption-queue-event-4
    base:
      apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
      kind: Rule
      spec:
        deletionPolicy: Orphan
        forProvider:
          region: # patchme
          eventPattern: |
            {
              "source": [
                "aws.ec2"
              ],
              "detail-type": [
                "EC2 Instance State-change Notification"
              ]
            }
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-ec2-inst-state-change'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.eventBusName
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-int-bus'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

  - name: karpenter-interruption-queue-event-target-4
    base:
      apiVersion: cloudwatchevents.aws.upbound.io/v1beta1
      kind: Target
      spec:
        deletionPolicy: Orphan
        forProvider:
          arn: # patchme
          region: # patchme
          targetId: SendToSQS
    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-ec2-inst-state-change-target'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.ruleRef.name
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-ec2-inst-state-change'
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: spec.forProvider.eventBusName
      transforms:
        - type: string
          string:
            fmt: '%s-karpenter-int-bus'
    - type: FromCompositeFieldPath
      fromFieldPath: status.karpenterInterruptionQueueArn
      toFieldPath: spec.forProvider.arn
      policy:
        fromFieldPath: Required
    - type: FromCompositeFieldPath
      fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name

## Multi Tenant Resources

  - name: account-provisioner-role-multi-tenant
    base:
      apiVersion: iam.aws.upbound.io/v1beta1
      kind: Role
      spec:
        forProvider:
          assumeRolePolicy: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": "{{ .Values.backofficeAccountId }}"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }

    patches:
    - type: FromCompositeFieldPath
      fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: '%s-account-provisioner-mt'
    - type: FromCompositeFieldPath
      fromFieldPath: status.id
      toFieldPath: spec.providerConfigRef.name
